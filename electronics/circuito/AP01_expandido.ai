%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (LATA) ()
%%Title: (AP01_expandido.ai)
%%CreationDate: 5/23/2017 3:07 PM
%%Canvassize: 16383
%%BoundingBox: 14 -40 136 121
%%HiResBoundingBox: 14.4775 -39.2588 135.4375 120.3823
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 75.0273 39.832 75.0273 39.832
%AI3_TileBox: -221.9224 -346.3184 371.8379 427.4414
%AI3_DocumentPreview: None
%AI5_ArtSize: 120.8604 159.5415
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -66 126 6.44 1821 1074 26 0 0 -1870 117 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-232 -333
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 100 128 8
%%BeginData: 13174 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD23FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD38FFA8FD2BFFA8FFA8FD64FF
%A8FD32FFA8FD31FFA8FD64FFA8FD64FFA8FD3DFFFD05A87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA8A8FD09FFA8FD2AFFA8FD0FFFA8
%27FD1EF827FD09FFA8FD38FFA827F87D7DA852F8F87DA8A87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA852F827FD09FFA8FD26FFA8FD0FFFA827
%F87DFFFFFF27F8A8FD18FF52F827FD09FFA8FD34FFA8F8F8A8FFFFA827F8
%A8FD1AFF52F827FD09FFA8FD18FFA8A8A8FFA8A8A8FFA8A8A8FD0FFFA8F8
%F8A8FFFFA8F8F8A8FD1CFF52F827FD09FFA8FD2BFFFD067D27F8A8FFFFA8
%F8F8FFFFFFA8FD187DFFFFFF52F827FD09FFA8FD16FFA8FD11FFA827FD07
%F8A8FFFFA8F8F8A8FFFF7DFD19F827FFFFFF52F827FD09FFA8FD26FFA827
%F87DA8A8A8FFA8FFFFFFA8F8F8FFFFFF7DF8F8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFFD04A8F8F827FFFFFF52F827FD09FFA8FD14FFA8FD0F
%FFA8F8F87DFD08FF7DF8F8FFFFFF7DF8F8FD17FFA8F827F827FFFFFF52F8
%27FD09FFA8FD22FFA827F8A8FD08FFA8F8F8FFFFFF7DF8F8FD18FFA8F8A8
%7DF827FFFFFF7DF827FD1CFFA8FD06FF7D277DFD04FFA8F8F8A8A827F852
%FFFF7D27F8F8F8FF7DFD04F8FF7DF8F87DFFFF52F8F87DFFFF27F8F8A8FD
%08FF7DF87DFF52F827FFFFFF52F8F8FD07FFA8FD14FFA8FD04FFA8F827F8
%FD0452F8F8A8FF2752FFF87DFF2752A8F8A8FF277DA8F8A8FFF87DA8F8FF
%A8F8A87DF8FF7D27A87DF8FD08FFA8F87DFFFF7DF827FFFFFF7DF827FD07
%FFA8FD12FFA8FD05FF7DF852F8F827F8F8F8A8FFFFF87DFF2727FFF8A8FF
%277DA8F8FFFFF87DFFF8FFA8F8A8A8F8FFA8F8A87DF8FF7DF8A8FD07FFA8
%F87DFFFFFF52F87DFFFFFF52F87DFD05FFA8FD14FFA8FD05FF52F852FD08
%FF7DF827F8FFFF7DF827F8FFFF52F82727FF7DF8F82752FF52F8F82752FF
%FF27F82752FD08FFA8F8A8FFFFFFA8F8A8FFFFFFA8F8A8FD06FFA8FD12FF
%A8FD12FFA852A8FFFFFFA852FD04FF7D7DFF52F8277D7DFF52F852A87DFF
%FFFFA87D7DFD09FFA8F87DFFFFFF7DF87DFFFFFF7DF87DFD05FFA8FD34FF
%52F827FFFFFF27F852FD13FFF8A8FFFFFFA8F8A8FFFFFFA8F8A8FD06FFA8
%FD12FFA8FD06FF7DF852FD0EFFA8FFFFFFA8FFFFFF52F827FFFFFF27F852
%FFFFFFA8FFFFFF7D2727FFFFFF7DF827FFFFFF52F827FFFFFF7DF87DFFFF
%FF7DF8A8FD05FFA8FD19FFA8F87DF87DFD08FF7D27F827F827F827F827F8
%27F8F852FFFFFF27F852FFFFFF5227F827F8F8522752FFA8F8522752FFA8
%F87DF87DFFFFA8F8A8FFFFFFA8F8A8FD06FFA8FD12FFA8FD05FFA8F852F8
%7DFD07FF7DF8F8522752275227522752275252FFFFFF27F852FFFFFF27F8
%27522752F852F852FFFFF852F87DFFA8F827F87DFFFF7DF87DFFFFFF7DF8
%A8FD05FFA8FD14FFA8FD05FF52F852FD07FF7DF827FD0FFF27F852FFFFFF
%27F87DFD04FFA82752FFFFFFA8F852FFFFFF7D277DFFFFFFA8F8A8FFFFFF
%A8F8A8FD06FFA8FD12FFA8FD06FFA8F8A8FD06FF7DF827FD0FFF27F852FF
%FFFF27F87DFD0BFFA8F852FD09FF7DF87DFFFFFF7DF87DFD05FFA8FD14FF
%A8FD05FFA8F87DFD05FF7DF827FD0FFF27F852FFFFFF27F87DFD0DFFF87D
%FD09FFA8F8A8FFFFFFA8F8A8FD06FFA8FD12FFA8FD06FFA8F87DFD04FF52
%F827FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF27F852FFFFFF27F87DFD0DFFA8
%F852FD09FF7DF87DFFFFFF7DF8A8FD07FFA8FD18FF52F87DFFFFFF7DF827
%FFFFFF52FD0DF87DFFFFFF52F87DFD0FFFF87DFD09FFA8F8A8FFFFFFA8F8
%7DFD08FFA8FD10FFA8FD05FF52F827FFFFFF52F827FFFFFF52F8277D5252
%527D5252527D52527DFD04FF2727FD0FFFA8F852FD09FF7DF87DFFFFFFA8
%27F87DFD08FFA8FD14FF7DF827FFFFFF52F827FFFFFF52F827FD11FF2727
%FD10FFF87DFD09FFA8F8A8FD05FF27F8A8FD08FFA8FFFFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFFFF7DF827FFFFFF52F827FFFFFF27F852FD12FF2727FD
%0FFFA8F852FD09FF7DF8A8FD06FF27F87DFD08FFA8FFA8FD0EFF7DF827FF
%7D2727F852FF525227F852FF52277DFFFFFF27277DFFFFFF27277DFFFFA8
%F8F8A8FFFFA82752A8FFFFA82752A8FFFF7DF827FFFFFF7DF87DFFFFFF52
%F852FFFFFF5227A8FF27F8A8FD09FFA8FD0DFF52F827FF52F852F827FF52
%F852F827FF272752F87DFF272752F87DFFF82752F8A8FFF85252F8A8A8F8
%522727FFA8F8522727FF7DF87DF827FF7DF87DF852FF52F87DF852FF52F8
%7DF87DFF27F87DFD06FFA8FD0EFFA8F8F8FFFF2752FF7D27FF277DFF5252
%FF27A8FF2752FFF8A8FF277DA8F8FFFFF87DA8F8FFFFF8A87D27FFFFF8FF
%7D27FFFFF8FF2752FFA8F8FF2752FF7D27FF277DFF7D27FFF8A8FF5227FF
%FF27F8FD08FFA8FD0DFF52F827FF52F852F852FF52F852F852FF272752F8
%7DFF272727F8A8FF275252F8A8FFF8272727FFA8F8522727FFA8F852F827
%FF7DF852F8F8A87DF852F852FF52F852F87DFF52F852F87DFFFF52F8A8FD
%05FFA8FD10FF7DF827FF7D2752FFFFFF52277DFFFFFF52527DFFFFFF5227
%7DFFFFFFF8F8A8FFFFFF2752A8FFFFA82752A8FFFFA82752A8FFFF7D2752
%F827A8A8277DFFFFFF7D277DFFFFFF7D277DFFFFFF7DF8FD08FFA8FD0FFF
%7DF827FD18FF52F8FD18FF7DF8F8A8FFFFFFA8FD0DFF52F8A8FD05FFA8FD
%08FF525252A8FD06FF7DF827FD17FF2727FD0EFFA8FD05FFA8FD04FFA8F8
%27A8FD10FF7DF8FD08FFA8FD05FFA8F8272727FD07FF7DF8F87D5252527D
%5252527D5252527D5252527D5252527D5227F8FD0CFF7DF8F852FFFF7DF8
%F852FD04FFA8F8F85252527D5252527D5252527DFD04FF52F8A8FD05FFA8
%FD07FFA8F8FF5252FD08FF7DFD19F852FD0BFFF8A8A8F87DFFF8A8A8F8A8
%FD04FFA8FD0DF852FFFFFF7DF8A8FD07FFA8FD05FFA8FD04F8FD09FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF27F852FD09FFA8F8
%A8FFF87DA8F8A8FFF87DFD06FFA8FFA8FFA8FFA8FFA8FFFF52F852FFFF52
%F8A8FD05FFA8FD08FFA8A87DF8F8FD21FF52F852FD09FF5227F827FFFF27
%F8F852FD13FF7DF852FF7DF8FD08FFA8FD09FFA8F8F8A8FD20FF27F852FD
%09FF7DA8FD04FF7DA8FD15FF7DF85227F8A8FD05FFA8FD08FF7D2727FFA8
%F8F8A8FD20FF52F852FD26FF7DF8F8F8FD08FFA8FD05FFA8F87D5227FFA8
%F8F8A8FD20FF27F8FD0A27F827F827F8FD082752A8FD0EFF7DF827A8FD05
%FFA8FD08FFF8A82752FFFFA8F8F8FD21FF52272752272727522727275252
%F8F8FD042752FD0427F827A8FD0EFF52F8FD08FFA8FD06FF7DF8F8F87DFF
%FFA8F8F8A8FD2CFF7DF827FD08FFA8F8F8A8FD0DFF52F8A8FD05FFA8FD0A
%FFA827F87DFFFFA827F8A8FD2CFF7DF827FD09FFF8F87DFD0CFF52F8FD08
%FFA8FD09FFA827F87DFFFFA8F8F8A8FD16FFA87D52FD13FF52F8277D7DFD
%06FFA8F8F87DFD0BFF27F8A8FD05FFA8FD0DFF27F87DFFFFA827F8A8FD15
%FF52F8F8F8FD13FF52F8F8F852FD07FFF8F8F827FD09FF52F8FD08FFA8FD
%0CFF27F8A8FFFFA827F8A8FD13FFA8F8A8FFF87DFD12FF52F8FF52F8A8FD
%06FF52F87DF87DFD08FF27F8A8FD05FFA8FD0EFFA8F87DFFFFFF7DF87DFD
%13FFA8F8527DF8A8FD12FF52F87D27F8FD07FF7DF827F87DFD08FF52F8FD
%08FFA8FD0CFFA8F87DFFFFFFA8F8A8FD14FF7DFD04F8A8FD12FF27F8F8A8
%FD08FF522752FD09FF27F8A8FD05FFA8FD0EFFA8F87DFFFFFFA8F8A8FD17
%FFA8F8F8FD13FFA8FD16FF52F8FD08FFA8FD06FF7DF852A8FFFFA8F87DFF
%FFFF52F852FD14FFA85227FF7DF8F85227A8FD14FF7D2752FFFFFFA87DA8
%FD09FF27F8A8FD05FFA8FD07FFA8F852F827FFFFA8F87DFFFF7DF852F87D
%FD13FF27F827F8FFA8F8F827F8FD13FF7DF827F852FFA8F8F827A8FD08FF
%52F8FD08FFA8FD05FF2727FFA8F8A8FFA8F87DFFFFF827FF52F8FD12FFA8
%F8A8FFF87DA8F8FFA8F87DFD12FF2727FF52F8FF7DF8A8F852FD08FF27F8
%A8FD05FFA8FD07FF7DF87D2727FFFFA8F87DFFFF7DF852F852FD13FF2727
%52F8FFFFF82752F8FD13FF27F852F852FF27F8F8F8A8FD08FF52F8FD08FF
%A8FD06FF7DF827A8FFFFA8F87DFFFFFF52F852A8FD13FFA8F8F87DFFFF7D
%2727A8FD12FF52F8272752FF27F8277DA8FD09FF27F8A8FD05FFA8FD0EFF
%A8F87DFD1BFF2727FD18FF52F852FFFFFF27F852FD0CFF52F8FD08FFA8FD
%06FF52F8277DFFFFA8F87DFD1BFF27F8FD17FF27F852FFFFFF27F852FD0D
%FF27F8A8FD05FFA8FD07FF7DF87D2727A8FFA8F87DFD1BFF2727FD16FF52
%F8F87D527D27F87DFD0EFF52F8FD08FFA8FD05FF2727FFA8F8A8FFA8F87D
%FD1BFF52F8FD15FFA8FD07F87DFD0FFF27F8A8FD05FFA8FD07FFA8F827F8
%27FFFFA8F87DFD1BFF2727FD15FFA8F87DFD15FF52F8FD08FFA8FD06FFA8
%2752A8FFFFA8F87DFD1BFF52F8FD15FFA8F87DFD15FF27F8A8FD05FFA8FD
%08FFFD04A8FFFFA8F87DFD1BFF27F8FD04FFA8FD05FFA8FD05FFA8FD05FF
%F87DFD04FFA8FD05FFA8FD05FFA8FD04FF52F8FD08FFA8FD05FF27FD04F8
%A8FFA8F87DFFFFA827F827A8FFA827F827A8FF7D27F827A8FF7DF8F852FF
%FF7DF8F852FFFF52F8F87DFFFF52F8F87DFFFF27F8F8A8FFFF27F8F8A8FF
%FF27F8F8A8FFA8F8F827A8FFA8F8F827FFFFFF27F8A8FD05FFA8FD07FF52
%F8FF7DF8A8FFA8F87DFFFF5227FF2727FF5227FF2752FF2752FF277DFF27
%7DFFF8A8FFF87DFFF8A8A8F8A8A8F8FFA8F8A8A8F8FF7D27A87DF8FF5227
%A87D27FF2727FF5227FF2752FF2727FFF852FF2752FFFF52F8FD08FFA8FD
%05FF2727FF7DF8FFFFFFF8F8A8FF2752FF52F8FFF852FF5227FFF87DFF27
%52FFF8A8FF2752FFF8A8FFF87DA8F8FFA8F87DA8F8FFA8F8A87DF8FF7DF8
%FF7D27FF52F8FF2727FF5227FF2752FF2727FFF852FF2752FFA8F827A8FD
%05FFA8FD07FF52F827F8F87DFFFFFFF8F8A8FFF827F8A8FFA8F827F8A8FF
%7DF827F8FFFF7DF82727FFFF52F82727FFFF52F82727FFFF27F82752FFFF
%27F8F87DFF27F8F8277DFFA827F8F87DFF7D27F827A8FF7D272727A8A8F8
%27A8FD08FFA8FD05FFA87D7D7D27F87DFFFFA8F8F8A8FF7DA8FFFFFFA87D
%A8FFFFFFA87DFD04FFA87DFD04FFA87DFD04FFA87DFD04FF7D7DFFFFFFA8
%7DA8FFF8F87DA8A8FFFFFFA87DA8FFFFFFA87DA8FFFFFFA87DFFA8F827A8
%FD07FFA8FD0CFFF8F87DFFFFFFF8F8A8FD2BFFF8F87DFD14FFA8F827A8FD
%0AFFA8FD0BFFF8F87DFFFFFFF8F87DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8F8F87DFD
%05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7DF827FD0AFFA8FD0EFFF8F87D
%FFFFFF27F8F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F8F87DFFFFFF2727F827F827F827F8
%27F827F827F827F827F852FD0DFFA8FD0DFFF8F87DFFFFFF525227522752
%275227522752275227522752275227522752275227522752275227522752
%2752275227527DFFFFA8F8F8275227522752275227522752275227522752
%FD0CFFA8FD10FFF8F87DFD2FFFF8F8A8FD20FFA8FD0FFFF8F87DFD2CFFA8
%F8F8A8FD1FFFA8FD12FF27F87DFD2BFFF8F8A8FD22FFA8FD11FF27F852FF
%FD28A8F8F8A8FD21FFA8FD14FF27FD2AF827A8FD24FFA8FD13FF5252527D
%5252527D5252527D5252527D5252527D5252527D5252527D5252527D5252
%527D5252527D5252A8FD23FFA8FD65FFA8FD61FFA8FD65FFA8FD61FFA8FD
%65FFA8FD0AFF52275227272752277DFD07FFA82752272727522727275227
%27A8FD39FFA8FD0CFF27FD07F852FD07FFA8FD0CF8A8FD3BFFA8FD0AFF27
%FD07F852FD07FFA8FD0CF87DFD39FFA8FD0CFF27FD07F852FD07FFA8FD0C
%F8A8FD3BFFA8FD05FFA852272727FD087D522727277DFFFFFFA8FD04F8FD
%087DFD04277DFD35FFA8FD08FFFD04F87DFD07FF52F8F8F827FFFFFF7DFD
%04F8FD08FF27F8F8F87DFD37FFA8FD05FFA8FD04F87DFD07FF7DF8F8F852
%FFFFFFA8FD04F8A8FD07FF27F8F8F852FD35FFA8FD08FFFD04F87DFD07FF
%52F8F8F827FFFFFFA8FD04F8FD08FF27F8F8F87DFD37FFA8FD05FFA8FD04
%F87DFD07FF7DF8F8F852FFFFFFA8FD04F8A8FD07FF27F8F8F852FD35FFA8
%FD08FFFD04F87DFD07FF52F8F8F827FFFFFFA8FD04F8FD08FF27F8F8F87D
%FD37FFA8FD05FFA827F8F8F87DFD07FF7DF8F8F852FFFFFFA8F8F8F827A8
%FD07FF27F8F8F852FD35FFA8FD08FFFD04F87DFD07FF52F8F8F827FFFFFF
%A8FD04F8FD08FF27F8F8F87DFD37FFA8FD05FFA827F8F8F87DFD07FF7DF8
%F8F852FFFFFFA8F8F8F827A8FD07FF27F8F8F852FD35FFA8FD08FFFD04F8
%7DFD07FF52F8F8F827FFFFFF7DFD04F8FD08FF27F8F8F87DFD37FFA8FD05
%FFA8FD04F87DFD07FF7DF8F8F852FFFFFFA8FD04F8A8FD07FF27F8F8F852
%FD35FFA8FD08FFFD04F87DFD07FF52F8F8F827FFFFFFA8FD04F8FD08FF27
%F8F8F87DFD37FFA8FD05FFA8FD04F87DFD07FF7DF8F8F852FFFFFFA8FD04
%F8A8FD07FF27F8F8F852FD35FFA8FD08FFFD04F87DFD07FF52F8F8F827FF
%FFFFA8FD04F8FD08FF27F8F8F87DFD37FFA8FD05FFA827F8F8F87DFD07FF
%7DF8F8F852FFFFFFA8F8F8F827A8FD07FF27F8F8F852FD35FFA8FD08FFFD
%04F8A8FD07FF7DF8F8F827FFFFFFA8FD04F8FD08FF27F8F8F87DFD37FFA8
%FD05FFA827F8F8F852527D527D527D5227F8F8F852FFFFFFA8FD04F8527D
%527D527D527DFD04277DFD35FFA8FD08FFFD10F827FFFFFF7DFD0CF8A8FD
%3BFFA8FD05FFA8FD10F852FFFFFFA8FD0CF87DFD39FFA8FD08FFFD10F827
%FFFFFFA8FD0CF8A8FD3BFFA8FD05FFA8FD04F8272752272727522727F8F8
%F852FFFFFFA8FD04F82752272727522727A8FD39FFA8FD08FFFD04F87DFD
%07FF52F8F8F827FFFFFFA8FD04F8FD44FFA8FD05FFA827F8F8F87DFD07FF
%7DF8F8F852FFFFFFA8F8F8F827A8FD41FFA8FD08FFFD04F87DFD07FF52F8
%F8F827FFFFFFA8FD04F8FD44FFA8FD05FFA827F8F8F87DFD07FF7DF8F8F8
%52FFFFFFA8F8F8F827A8FD0BFFA8FD25FFA8FD0FFFA8FD08FFFD04F87DFD
%07FF52F8F8F827FFFFFF7DFD04F8FD08FFA8FFFFFF7DA8FD1DFFA87DFD05
%FF7D7DFD10FFA8FD05FFA8FD04F87DFD07FF7DF8F8F852FFFFFFA8FD04F8
%A8FD04FF7D52FF27527DFF27A8FF5227A87D2727FF7D527DFFFFFFA8A87D
%A8FD04FF2752A87D277DA85227FF7D7D7DFF527DFF7D277DA85252FD07FF
%A8FD08FFFD04F87DFD07FF52F8F8F827FFFFFFA8FD04F8FD05FF52277D7D
%A852FF7D7DFF7D52A8A827277D7DA852FD04FF52527DFFFFFFA87D7D7D52
%7DA8A852A87DFFF87DFFA87DFF522752FD047DFD08FFA8FD05FFA827F827
%F8A8FD07FF7DF827F852FFFFFFA8F827F827A8FFFFFFA85227A852527DFF
%2752FF7D277DA85252A852527DFD0AFFA82752A87DA8FFA85227A87D5252
%FF5227A87D527DA85252A8FD06FFA8FD26FFA8FFFFFFA8FFFFFFA8FD09FF
%A8FD0BFFA87DA8FD0DFFA8FD05FFA8FD0AFFA8FD61FFA8FD65FFA8FD61FF
%A8FD65FF7DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8FF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
*u
1 D
0 O
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
0 J 0 j 1 w 10 M []0 d0 XR
121.4824 74.8901 m
121.4824 76.3594 120.2871 77.5542 118.8184 77.5542 c
117.3486 77.5542 116.1533 76.3594 116.1533 74.8901 c
116.1533 73.4214 117.3486 72.2266 118.8184 72.2266 c
120.2871 72.2266 121.4824 73.4214 121.4824 74.8901 c
f
0 D
117.3779 74.8901 m
117.3779 75.6841 118.0244 76.3306 118.8184 76.3306 c
119.6123 76.3306 120.2578 75.6841 120.2578 74.8901 c
120.2578 74.0962 119.6123 73.4502 118.8184 73.4502 c
118.0244 73.4502 117.3779 74.0962 117.3779 74.8901 c
f
*U
*u
1 D
104.418 77.5542 m
102.9492 77.5542 101.7539 76.3594 101.7539 74.8901 c
101.7539 73.4214 102.9492 72.2266 104.418 72.2266 c
105.8867 72.2266 107.082 73.4214 107.082 74.8901 c
107.082 76.3594 105.8867 77.5542 104.418 77.5542 c
f
0 D
104.418 73.4502 m
103.624 73.4502 102.9785 74.0962 102.9785 74.8901 c
102.9785 75.6841 103.624 76.3306 104.418 76.3306 c
105.2119 76.3306 105.8574 75.6841 105.8574 74.8901 c
105.8574 74.0962 105.2119 73.4502 104.418 73.4502 c
f
*U
*u
1 D
92.6826 74.8901 m
92.6826 76.3594 91.4873 77.5542 90.0176 77.5542 c
88.5488 77.5542 87.3535 76.3594 87.3535 74.8901 c
87.3535 73.4214 88.5488 72.2266 90.0176 72.2266 c
91.4873 72.2266 92.6826 73.4214 92.6826 74.8901 c
f
0 D
88.5781 74.8901 m
88.5781 75.6841 89.2236 76.3306 90.0176 76.3306 c
90.8115 76.3306 91.458 75.6841 91.458 74.8901 c
91.458 74.0962 90.8115 73.4502 90.0176 73.4502 c
89.2236 73.4502 88.5781 74.0962 88.5781 74.8901 c
f
*U
*u
1 D
93.9775 63.9453 m
95.4473 63.9453 96.6426 65.1401 96.6426 66.6094 c
96.6426 68.0781 95.4473 69.2729 93.9775 69.2729 c
92.5088 69.2729 91.3135 68.0781 91.3135 66.6094 c
91.3135 65.1401 92.5088 63.9453 93.9775 63.9453 c
f
0 D
93.9775 68.0493 m
94.7715 68.0493 95.418 67.4033 95.418 66.6094 c
95.418 65.8154 94.7715 65.1689 93.9775 65.1689 c
93.1836 65.1689 92.5381 65.8154 92.5381 66.6094 c
92.5381 67.4033 93.1836 68.0493 93.9775 68.0493 c
f
*U
*u
1 D
86.7783 63.9453 m
88.2471 63.9453 89.4424 65.1401 89.4424 66.6094 c
89.4424 68.0781 88.2471 69.2729 86.7783 69.2729 c
85.3086 69.2729 84.1133 68.0781 84.1133 66.6094 c
84.1133 65.1401 85.3086 63.9453 86.7783 63.9453 c
f
0 D
86.7783 68.0493 m
87.5723 68.0493 88.2178 67.4033 88.2178 66.6094 c
88.2178 65.8154 87.5723 65.1689 86.7783 65.1689 c
85.9844 65.1689 85.3379 65.8154 85.3379 66.6094 c
85.3379 67.4033 85.9844 68.0493 86.7783 68.0493 c
f
*U
*u
1 D
82.8184 72.2266 m
84.2871 72.2266 85.4824 73.4214 85.4824 74.8901 c
85.4824 76.3594 84.2871 77.5542 82.8184 77.5542 c
81.3486 77.5542 80.1533 76.3594 80.1533 74.8901 c
80.1533 73.4214 81.3486 72.2266 82.8184 72.2266 c
f
0 D
82.8184 76.3306 m
83.6123 76.3306 84.2578 75.6841 84.2578 74.8901 c
84.2578 74.0962 83.6123 73.4502 82.8184 73.4502 c
82.0244 73.4502 81.3779 74.0962 81.3779 74.8901 c
81.3779 75.6841 82.0244 76.3306 82.8184 76.3306 c
f
*U
*u
1 D
58.5542 74.8901 m
58.5542 73.4214 59.749 72.2266 61.2178 72.2266 c
62.687 72.2266 63.8818 73.4214 63.8818 74.8901 c
63.8818 76.3594 62.687 77.5542 61.2178 77.5542 c
59.749 77.5542 58.5542 76.3594 58.5542 74.8901 c
f
0 D
62.6582 74.8901 m
62.6582 74.0962 62.0117 73.4502 61.2178 73.4502 c
60.4238 73.4502 59.7778 74.0962 59.7778 74.8901 c
59.7778 75.6841 60.4238 76.3306 61.2178 76.3306 c
62.0117 76.3306 62.6582 75.6841 62.6582 74.8901 c
f
*U
*u
1 D
51.354 74.8901 m
51.354 73.4214 52.5488 72.2266 54.0181 72.2266 c
55.4868 72.2266 56.6816 73.4214 56.6816 74.8901 c
56.6816 76.3594 55.4868 77.5542 54.0181 77.5542 c
52.5488 77.5542 51.354 76.3594 51.354 74.8901 c
f
0 D
55.458 74.8901 m
55.458 74.0962 54.812 73.4502 54.0181 73.4502 c
53.2241 73.4502 52.5776 74.0962 52.5776 74.8901 c
52.5776 75.6841 53.2241 76.3306 54.0181 76.3306 c
54.812 76.3306 55.458 75.6841 55.458 74.8901 c
f
*U
*u
1 D
39.6182 77.5542 m
38.1489 77.5542 36.9541 76.3594 36.9541 74.8901 c
36.9541 73.4214 38.1489 72.2266 39.6182 72.2266 c
41.0869 72.2266 42.2817 73.4214 42.2817 74.8901 c
42.2817 75.3096 42.1758 75.7007 42.0024 76.0542 C
54.4292 88.4883 L
68.4209 88.4883 L
68.5332 88.4883 68.645 88.5112 68.7505 88.5547 c
68.832 88.5884 68.9004 88.6421 68.9668 88.6978 c
68.9868 88.7139 69.0107 88.7207 69.0293 88.7388 C
74.4453 94.1104 L
74.8008 93.9341 75.1953 93.8262 75.6182 93.8262 c
77.0869 93.8262 78.2822 95.021 78.2822 96.4902 c
78.2822 97.959 77.0869 99.1538 75.6182 99.1538 c
74.1494 99.1538 72.9541 97.959 72.9541 96.4902 c
72.9541 96.0752 73.0576 95.687 73.228 95.3364 C
68.0649 90.2158 L
54.0723 90.2158 L
53.959 90.2158 53.8462 90.1934 53.7397 90.1489 c
53.6504 90.1118 53.5737 90.0547 53.5029 89.9917 c
53.4893 89.98 53.4722 89.9756 53.4595 89.9629 C
40.7803 77.2759 L
40.4277 77.4487 40.0366 77.5542 39.6182 77.5542 c
f
0 D
39.6182 73.4502 m
38.8242 73.4502 38.1777 74.0962 38.1777 74.8901 c
38.1777 75.6841 38.8242 76.3306 39.6182 76.3306 c
39.9375 76.3306 40.23 76.2227 40.4692 76.0459 C
40.5059 75.9829 40.5366 75.917 40.5903 75.8633 c
40.644 75.8096 40.71 75.7793 40.7725 75.7427 C
40.9497 75.5034 41.0581 75.21 41.0581 74.8901 c
41.0581 74.0962 40.4121 73.4502 39.6182 73.4502 c
f
75.6182 97.9302 m
76.4121 97.9302 77.0576 97.2842 77.0576 96.4902 c
77.0576 95.6963 76.4121 95.0498 75.6182 95.0498 c
75.2949 95.0498 75 95.1606 74.7588 95.3413 C
74.7227 95.4028 74.6934 95.4678 74.6406 95.521 c
74.5869 95.5747 74.5215 95.6055 74.46 95.6426 C
74.2842 95.8809 74.1777 96.1724 74.1777 96.4902 c
74.1777 97.2842 74.8242 97.9302 75.6182 97.9302 c
f
*U
*u
1 D
39.6182 34.3545 m
38.1489 34.3545 36.9541 33.1592 36.9541 31.6904 c
36.9541 30.2217 38.1489 29.0264 39.6182 29.0264 c
41.0869 29.0264 42.2817 30.2217 42.2817 31.6904 c
42.2817 33.1592 41.0869 34.3545 39.6182 34.3545 c
f
0 D
39.6182 30.251 m
38.8242 30.251 38.1777 30.8965 38.1777 31.6904 c
38.1777 32.4844 38.8242 33.1299 39.6182 33.1299 c
40.4121 33.1299 41.0581 32.4844 41.0581 31.6904 c
41.0581 30.8965 40.4121 30.251 39.6182 30.251 c
f
*U
*u
1 D
44.1543 31.6904 m
44.1543 30.2217 45.3491 29.0264 46.8179 29.0264 c
48.2871 29.0264 49.4819 30.2217 49.4819 31.6904 c
49.4819 33.1592 48.2871 34.3545 46.8179 34.3545 c
45.3491 34.3545 44.1543 33.1592 44.1543 31.6904 c
f
0 D
48.2583 31.6904 m
48.2583 30.8965 47.6118 30.251 46.8179 30.251 c
46.0239 30.251 45.3779 30.8965 45.3779 31.6904 c
45.3779 32.4844 46.0239 33.1299 46.8179 33.1299 c
47.6118 33.1299 48.2583 32.4844 48.2583 31.6904 c
f
*U
*u
1 D
51.354 31.6904 m
51.354 30.2217 52.5488 29.0264 54.0181 29.0264 c
55.4868 29.0264 56.6816 30.2217 56.6816 31.6904 c
56.6816 33.1592 55.4868 34.3545 54.0181 34.3545 c
52.5488 34.3545 51.354 33.1592 51.354 31.6904 c
f
0 D
55.458 31.6904 m
55.458 30.8965 54.812 30.251 54.0181 30.251 c
53.2241 30.251 52.5776 30.8965 52.5776 31.6904 c
52.5776 32.4844 53.2241 33.1299 54.0181 33.1299 c
54.812 33.1299 55.458 32.4844 55.458 31.6904 c
f
*U
*u
1 D
58.5542 31.6904 m
58.5542 30.2217 59.749 29.0264 61.2178 29.0264 c
62.687 29.0264 63.8818 30.2217 63.8818 31.6904 c
63.8818 33.1592 62.687 34.3545 61.2178 34.3545 c
59.749 34.3545 58.5542 33.1592 58.5542 31.6904 c
f
0 D
62.6582 31.6904 m
62.6582 30.8965 62.0117 30.251 61.2178 30.251 c
60.4238 30.251 59.7778 30.8965 59.7778 31.6904 c
59.7778 32.4844 60.4238 33.1299 61.2178 33.1299 c
62.0117 33.1299 62.6582 32.4844 62.6582 31.6904 c
f
*U
*u
1 D
75.6182 34.3545 m
74.1494 34.3545 72.9541 33.1592 72.9541 31.6904 c
72.9541 30.2217 74.1494 29.0264 75.6182 29.0264 c
77.0869 29.0264 78.2822 30.2217 78.2822 31.6904 c
78.2822 33.1592 77.0869 34.3545 75.6182 34.3545 c
f
0 D
75.6182 30.251 m
74.8242 30.251 74.1777 30.8965 74.1777 31.6904 c
74.1777 32.4844 74.8242 33.1299 75.6182 33.1299 c
76.4121 33.1299 77.0576 32.4844 77.0576 31.6904 c
77.0576 30.8965 76.4121 30.251 75.6182 30.251 c
f
*U
*u
1 D
80.1533 31.6904 m
80.1533 30.2217 81.3486 29.0264 82.8184 29.0264 c
84.2871 29.0264 85.4824 30.2217 85.4824 31.6904 c
85.4824 33.1592 84.2871 34.3545 82.8184 34.3545 c
81.3486 34.3545 80.1533 33.1592 80.1533 31.6904 c
f
0 D
84.2578 31.6904 m
84.2578 30.8965 83.6123 30.251 82.8184 30.251 c
82.0244 30.251 81.3779 30.8965 81.3779 31.6904 c
81.3779 32.4844 82.0244 33.1299 82.8184 33.1299 c
83.6123 33.1299 84.2578 32.4844 84.2578 31.6904 c
f
*U
*u
1 D
87.3535 31.6904 m
87.3535 30.2217 88.5488 29.0264 90.0176 29.0264 c
91.4873 29.0264 92.6826 30.2217 92.6826 31.6904 c
92.6826 33.1592 91.4873 34.3545 90.0176 34.3545 c
88.5488 34.3545 87.3535 33.1592 87.3535 31.6904 c
f
0 D
91.458 31.6904 m
91.458 30.8965 90.8115 30.251 90.0176 30.251 c
89.2236 30.251 88.5781 30.8965 88.5781 31.6904 c
88.5781 32.4844 89.2236 33.1299 90.0176 33.1299 c
90.8115 33.1299 91.458 32.4844 91.458 31.6904 c
f
*U
*u
1 D
101.7539 31.6904 m
101.7539 30.2217 102.9492 29.0264 104.418 29.0264 c
105.8867 29.0264 107.082 30.2217 107.082 31.6904 c
107.082 33.1592 105.8867 34.3545 104.418 34.3545 c
102.9492 34.3545 101.7539 33.1592 101.7539 31.6904 c
f
0 D
105.8574 31.6904 m
105.8574 30.8965 105.2119 30.251 104.418 30.251 c
103.624 30.251 102.9785 30.8965 102.9785 31.6904 c
102.9785 32.4844 103.624 33.1299 104.418 33.1299 c
105.2119 33.1299 105.8574 32.4844 105.8574 31.6904 c
f
*U
*u
1 D
111.6182 34.3545 m
110.1494 34.3545 108.9541 33.1592 108.9541 31.6904 c
108.9541 30.2217 110.1494 29.0264 111.6182 29.0264 c
113.0869 29.0264 114.2822 30.2217 114.2822 31.6904 c
114.2822 33.1592 113.0869 34.3545 111.6182 34.3545 c
f
0 D
111.6182 30.251 m
110.8242 30.251 110.1787 30.8965 110.1787 31.6904 c
110.1787 32.4844 110.8242 33.1299 111.6182 33.1299 c
112.4121 33.1299 113.0576 32.4844 113.0576 31.6904 c
113.0576 30.8965 112.4121 30.251 111.6182 30.251 c
f
*U
*u
1 D
121.4824 31.6904 m
121.4824 33.1592 120.2871 34.3545 118.8184 34.3545 c
117.3486 34.3545 116.1533 33.1592 116.1533 31.6904 c
116.1533 30.2217 117.3486 29.0264 118.8184 29.0264 c
120.2871 29.0264 121.4824 30.2217 121.4824 31.6904 c
f
0 D
117.3779 31.6904 m
117.3779 32.4844 118.0244 33.1299 118.8184 33.1299 c
119.6123 33.1299 120.2578 32.4844 120.2578 31.6904 c
120.2578 30.8965 119.6123 30.251 118.8184 30.251 c
118.0244 30.251 117.3779 30.8965 117.3779 31.6904 c
f
*U
*u
1 D
25.2178 36.083 m
26.7661 36.083 28.0264 37.3428 28.0264 38.8906 c
28.0264 40.4385 26.7661 41.6982 25.2178 41.6982 c
23.6694 41.6982 22.4097 40.4385 22.4097 38.8906 c
22.4097 37.3428 23.6694 36.083 25.2178 36.083 c
f
0 D
25.2178 40.2588 m
25.9722 40.2588 26.5859 39.6445 26.5859 38.8906 c
26.5859 38.1367 25.9722 37.5225 25.2178 37.5225 c
24.4634 37.5225 23.8501 38.1367 23.8501 38.8906 c
23.8501 39.6445 24.4634 40.2588 25.2178 40.2588 c
f
*U
*u
1 D
25.2178 43.2822 m
26.7661 43.2822 28.0264 44.542 28.0264 46.0898 c
28.0264 47.6387 26.7661 48.8984 25.2178 48.8984 c
23.6694 48.8984 22.4097 47.6387 22.4097 46.0898 c
22.4097 44.542 23.6694 43.2822 25.2178 43.2822 c
f
0 D
25.2178 47.459 m
25.9722 47.459 26.5859 46.8447 26.5859 46.0898 c
26.5859 45.3359 25.9722 44.7217 25.2178 44.7217 c
24.4634 44.7217 23.8501 45.3359 23.8501 46.0898 c
23.8501 46.8447 24.4634 47.459 25.2178 47.459 c
f
*U
*u
1 D
75.6182 48.79 m
75.1895 48.79 74.7891 48.6807 74.4287 48.502 C
70.8296 52.1006 L
71.0083 52.4609 71.1182 52.8613 71.1182 53.29 c
71.1182 54.7793 69.9067 55.9902 68.418 55.9902 c
66.9292 55.9902 65.7178 54.7793 65.7178 53.29 c
65.7178 51.8018 66.9292 50.5908 68.418 50.5908 c
68.8467 50.5908 69.2466 50.7002 69.6069 50.8789 C
73.2061 47.2793 L
73.0273 46.9189 72.918 46.5186 72.918 46.0898 c
72.918 44.6016 74.1289 43.3906 75.6182 43.3906 c
77.1064 43.3906 78.3174 44.6016 78.3174 46.0898 c
78.3174 47.5791 77.1064 48.79 75.6182 48.79 c
f
0 D
67.1582 53.29 m
67.1582 53.9854 67.7231 54.5508 68.418 54.5508 c
69.1128 54.5508 69.6777 53.9854 69.6777 53.29 c
69.6777 53.001 69.563 52.7461 69.3984 52.5332 C
69.3535 52.5029 69.3037 52.4834 69.2642 52.4443 c
69.2246 52.4043 69.2051 52.3545 69.1748 52.3096 C
68.9619 52.1445 68.7075 52.0303 68.418 52.0303 c
67.7231 52.0303 67.1582 52.5957 67.1582 53.29 c
f
75.6182 44.8301 m
74.9238 44.8301 74.3584 45.3955 74.3584 46.0898 c
74.3584 46.3789 74.4727 46.6328 74.6367 46.8457 C
74.6816 46.876 74.7324 46.8955 74.7725 46.9355 c
74.8125 46.9756 74.832 47.0264 74.8633 47.0723 C
75.0762 47.2363 75.3291 47.3506 75.6182 47.3506 c
76.3125 47.3506 76.8779 46.7852 76.8779 46.0898 c
76.8779 45.3955 76.3125 44.8301 75.6182 44.8301 c
f
*U
*u
1 D
71.1182 46.0898 m
71.1182 47.5791 69.9067 48.79 68.418 48.79 c
66.9292 48.79 65.7178 47.5791 65.7178 46.0898 c
65.7178 44.9053 66.4902 43.9072 67.5542 43.5449 C
67.5542 34.1982 L
66.5107 33.8369 65.7544 32.8555 65.7544 31.6904 c
65.7544 30.2217 66.9492 29.0264 68.418 29.0264 c
69.8867 29.0264 71.0815 30.2217 71.0815 31.6904 c
71.0815 32.8555 70.3252 33.8369 69.2817 34.1982 C
69.2817 43.5449 L
70.3457 43.9072 71.1182 44.9053 71.1182 46.0898 c
f
0 D
67.1582 46.0898 m
67.1582 46.7852 67.7231 47.3506 68.418 47.3506 c
69.1128 47.3506 69.6777 46.7852 69.6777 46.0898 c
69.6777 45.4521 69.1938 44.9443 68.5771 44.8623 C
68.5239 44.873 68.4746 44.8945 68.418 44.8945 c
68.3613 44.8945 68.312 44.873 68.2588 44.8623 C
67.6421 44.9443 67.1582 45.4521 67.1582 46.0898 c
f
69.8579 31.6904 m
69.8579 30.8965 69.2119 30.251 68.418 30.251 c
67.624 30.251 66.978 30.8965 66.978 31.6904 c
66.978 32.4111 67.5127 33.0049 68.2051 33.1084 C
68.2749 33.0898 68.3428 33.0654 68.418 33.0654 c
68.4932 33.0654 68.561 33.0898 68.6309 33.1084 C
69.3232 33.0049 69.8579 32.4111 69.8579 31.6904 c
f
*U
*u
1 D
26.2568 65.3096 m
38.6743 52.8418 L
38.7236 48.626 L
37.6758 48.2549 36.918 47.2637 36.918 46.0898 c
36.918 44.6016 38.1294 43.3906 39.6182 43.3906 c
41.1069 43.3906 42.3184 44.6016 42.3184 46.0898 c
42.3184 47.2861 41.5313 48.291 40.4512 48.6445 C
40.3979 53.2012 L
40.3979 53.2012 L
40.3979 53.2129 L
40.3975 53.2529 40.3799 53.2871 40.374 53.3262 c
40.3638 53.3965 40.3579 53.4678 40.3301 53.5342 c
40.2837 53.6475 40.2148 53.748 40.1279 53.8311 C
27.4858 66.5249 L
27.4858 69.8452 L
22.9502 69.8452 L
22.9502 65.3096 L
26.2568 65.3096 L
f
0 D
24.084 67.5776 m
24.084 68.2026 24.5928 68.7114 25.2178 68.7114 c
25.8433 68.7114 26.3521 68.2026 26.3521 67.5776 c
26.3521 67.3232 26.252 67.0996 26.1099 66.9102 C
26.064 66.8794 26.0132 66.8599 25.9727 66.8193 c
25.9326 66.7793 25.9126 66.7285 25.8818 66.6831 C
25.6929 66.5425 25.4707 66.4434 25.2178 66.4434 c
24.5928 66.4434 24.084 66.9521 24.084 67.5776 c
f
40.8779 46.0898 m
40.8779 45.3955 40.313 44.8301 39.6182 44.8301 c
38.9233 44.8301 38.3584 45.3955 38.3584 46.0898 c
38.3584 46.7236 38.8359 47.2285 39.4458 47.3154 C
39.4956 47.3066 39.541 47.2861 39.5933 47.2861 c
39.5967 47.2861 39.6001 47.2861 39.6035 47.2861 c
39.6611 47.2871 39.7109 47.3096 39.7651 47.3213 C
40.3877 47.2441 40.8779 46.7334 40.8779 46.0898 c
f
*U
*u
1 D
25.2178 58.2217 m
25.5249 58.2217 25.8174 58.2842 26.085 58.3955 C
31.5952 52.8604 L
31.5952 31.6055 L
31.5952 31.4922 31.6182 31.3799 31.6621 31.2744 c
31.7036 31.1738 31.7646 31.084 31.8389 31.0068 c
31.8428 31.0029 31.8442 30.9971 31.8481 30.9932 C
38.9365 23.9043 L
38.9409 23.9004 38.9468 23.8984 38.9512 23.8945 c
39.0278 23.8203 39.1172 23.7598 39.2173 23.7178 c
39.3228 23.6738 39.4351 23.6514 39.5474 23.6514 C
90.0332 23.6514 L
90.1455 23.6514 90.2578 23.6738 90.3633 23.7178 c
90.4697 23.7617 90.5654 23.8262 90.6455 23.9063 C
96.0527 29.3066 L
96.4063 29.1328 96.7979 29.0264 97.2178 29.0264 c
98.6865 29.0264 99.8818 30.2217 99.8818 31.6904 c
99.8818 32.8633 99.1143 33.8506 98.0596 34.2051 C
98.0244 38.0977 L
104.3701 38.0977 L
104.4814 38.0977 104.5928 38.1211 104.6982 38.1641 c
104.7793 38.1973 104.8477 38.251 104.915 38.3057 c
104.9336 38.3213 104.958 38.3281 104.9756 38.3457 C
104.9795 38.3496 L
104.9805 38.3506 104.9814 38.3516 104.9824 38.3525 C
110.6758 43.9521 L
110.9639 43.8242 111.2822 43.75 111.6182 43.75 c
112.9082 43.75 113.958 44.7998 113.958 46.0898 c
113.958 47.3799 112.9082 48.4297 111.6182 48.4297 c
110.3281 48.4297 109.2783 47.3799 109.2783 46.0898 c
109.2783 45.7686 109.3438 45.4609 109.4619 45.1816 C
104.0166 39.8262 L
99.2676 39.8262 L
103.207 43.6904 L
103.5723 43.5049 103.9805 43.3906 104.418 43.3906 c
105.9072 43.3906 107.1182 44.6016 107.1182 46.0898 c
107.1182 47.5791 105.9072 48.79 104.418 48.79 c
102.9297 48.79 101.7188 47.5791 101.7188 46.0898 c
101.7188 45.6709 101.8232 45.2783 101.9941 44.9238 C
96.5469 39.5791 L
96.5459 39.5781 96.5449 39.5762 96.5439 39.5752 c
96.542 39.5732 96.541 39.5713 96.5391 39.5693 c
96.5049 39.5352 96.4854 39.4893 96.458 39.4502 c
96.4219 39.3994 96.3799 39.3535 96.3555 39.2959 c
96.3555 39.2949 96.3545 39.2939 96.3545 39.293 c
96.3438 39.2676 96.3457 39.2383 96.3379 39.2119 c
96.3135 39.1309 96.2891 39.0498 96.2891 38.9668 c
96.2891 38.9648 96.2881 38.9639 96.2881 38.9619 c
96.2881 38.9609 96.2891 38.959 96.2891 38.958 c
96.2891 38.957 96.2881 38.9551 96.2881 38.9541 C
96.3311 34.1914 L
95.2988 33.8232 94.5537 32.8467 94.5537 31.6904 c
94.5537 31.2725 94.6592 30.8809 94.832 30.5283 C
89.6758 25.3799 L
39.9053 25.3799 L
33.3228 31.9629 L
33.3228 53.2148 L
33.3228 53.2148 33.3228 53.2158 V
33.3228 53.2168 L
33.3228 53.2256 33.3184 53.2324 33.3179 53.2412 c
33.3149 53.3447 33.2964 53.4482 33.2563 53.5459 c
33.2163 53.6426 33.1567 53.7285 33.0864 53.8037 c
33.0801 53.8105 33.0781 53.8193 33.0713 53.8262 C
33.0703 53.8271 L
33.0698 53.8281 33.0693 53.8281 Y
27.3096 59.6143 L
27.4229 59.8838 27.4858 60.1797 27.4858 60.4902 c
27.4858 61.7412 26.4683 62.7588 25.2178 62.7588 c
23.9673 62.7588 22.9502 61.7412 22.9502 60.4902 c
22.9502 59.2393 23.9673 58.2217 25.2178 58.2217 c
f
0 D
111.6182 47.082 m
112.165 47.082 112.6104 46.6367 112.6104 46.0898 c
112.6104 45.543 112.165 45.0977 111.6182 45.0977 c
111.4004 45.0977 111.21 45.1826 111.0459 45.3018 C
111.0156 45.3477 110.9961 45.3984 110.9561 45.4395 c
110.916 45.4795 110.8662 45.5 110.8213 45.5303 C
110.707 45.6924 110.626 45.8779 110.626 46.0898 c
110.626 46.6367 111.0713 47.082 111.6182 47.082 c
f
104.418 47.3506 m
105.1133 47.3506 105.6787 46.7852 105.6787 46.0898 c
105.6787 45.3955 105.1133 44.8301 104.418 44.8301 c
104.126 44.8301 103.8691 44.9463 103.6553 45.1133 C
103.624 45.1602 103.6045 45.2119 103.5645 45.2529 c
103.5254 45.293 103.4756 45.3125 103.4307 45.3428 C
103.2705 45.5547 103.1582 45.8047 103.1582 46.0898 c
103.1582 46.7852 103.7236 47.3506 104.418 47.3506 c
f
96.9902 33.1074 m
97.0586 33.0898 97.124 33.0654 97.1973 33.0654 c
97.2002 33.0654 97.2021 33.0654 97.2051 33.0654 c
97.2793 33.0664 97.3457 33.0918 97.415 33.1104 C
98.1152 33.0127 98.6572 32.417 98.6572 31.6904 c
98.6572 30.8965 98.0117 30.251 97.2178 30.251 c
96.8965 30.251 96.6025 30.3604 96.3623 30.5391 C
96.3262 30.6006 96.2969 30.665 96.2441 30.7178 c
96.1914 30.7705 96.127 30.8008 96.0654 30.8369 C
95.8877 31.0762 95.7783 31.3701 95.7783 31.6904 c
95.7783 32.4063 96.3047 32.9971 96.9902 33.1074 C
f
25.2178 61.624 m
25.8433 61.624 26.3521 61.1152 26.3521 60.4902 c
26.3521 60.2363 26.252 60.0127 26.1104 59.8232 C
26.0645 59.793 26.0137 59.7734 25.9731 59.7324 c
25.9331 59.6924 25.9131 59.6416 25.8823 59.5967 C
25.6934 59.4561 25.4712 59.3564 25.2178 59.3564 c
24.5928 59.3564 24.084 59.8652 24.084 60.4902 c
24.084 61.1152 24.5928 61.624 25.2178 61.624 c
f
*U
*u
1 D
56.6816 96.4902 m
56.6816 97.959 55.4868 99.1538 54.0181 99.1538 c
52.5488 99.1538 51.354 97.959 51.354 96.4902 c
51.354 95.021 52.5488 93.8262 54.0181 93.8262 c
55.4868 93.8262 56.6816 95.021 56.6816 96.4902 c
f
0 D
52.5776 96.4902 m
52.5776 97.2842 53.2241 97.9302 54.0181 97.9302 c
54.812 97.9302 55.458 97.2842 55.458 96.4902 c
55.458 95.6963 54.812 95.0498 54.0181 95.0498 c
53.2241 95.0498 52.5776 95.6963 52.5776 96.4902 c
f
*U
*u
1 D
92.6826 96.4902 m
92.6826 97.959 91.4873 99.1538 90.0176 99.1538 c
88.5488 99.1538 87.3535 97.959 87.3535 96.4902 c
87.3535 95.021 88.5488 93.8262 90.0176 93.8262 c
91.4873 93.8262 92.6826 95.021 92.6826 96.4902 c
f
0 D
88.5781 96.4902 m
88.5781 97.2842 89.2236 97.9302 90.0176 97.9302 c
90.8115 97.9302 91.458 97.2842 91.458 96.4902 c
91.458 95.6963 90.8115 95.0498 90.0176 95.0498 c
89.2236 95.0498 88.5781 95.6963 88.5781 96.4902 c
f
*U
*u
1 D
68.7515 81.2935 m
68.853 81.3354 68.9438 81.397 69.0215 81.4727 c
69.0244 81.4756 69.0288 81.4766 69.0317 81.4795 C
81.6553 94.1045 L
82.0078 93.9316 82.3994 93.8262 82.8184 93.8262 c
84.2871 93.8262 85.4824 95.021 85.4824 96.4902 c
85.4824 97.959 84.2871 99.1538 82.8184 99.1538 c
81.3486 99.1538 80.1533 97.959 80.1533 96.4902 c
80.1533 96.0713 80.2598 95.6797 80.4326 95.3267 C
68.063 82.9541 L
54.0708 82.9541 L
54.0469 82.9541 54.0273 82.9424 54.0039 82.9404 c
53.915 82.9336 53.8262 82.9224 53.7422 82.8877 c
53.6636 82.8555 53.5981 82.8032 53.5332 82.7505 c
53.5107 82.7324 53.4829 82.7246 53.4619 82.7036 C
47.9893 77.271 L
47.6343 77.4463 47.2402 77.5542 46.8179 77.5542 c
45.3491 77.5542 44.1543 76.3594 44.1543 74.8901 c
44.1543 73.4214 45.3491 72.2266 46.8179 72.2266 c
48.2871 72.2266 49.4819 73.4214 49.4819 74.8901 c
49.4819 75.3057 49.3779 75.6943 49.2075 76.0449 C
54.4272 81.2266 L
68.4209 81.2266 L
68.5337 81.2266 68.646 81.2495 68.7515 81.2935 c
f
0 D
82.8184 97.9302 m
83.6123 97.9302 84.2578 97.2842 84.2578 96.4902 c
84.2578 95.6963 83.6123 95.0498 82.8184 95.0498 c
82.498 95.0498 82.2051 95.1582 81.9658 95.3354 C
81.9297 95.3979 81.8994 95.4634 81.8457 95.5171 c
81.792 95.5708 81.7266 95.6016 81.6631 95.6382 C
81.4863 95.8774 81.3779 96.1704 81.3779 96.4902 c
81.3779 97.2842 82.0244 97.9302 82.8184 97.9302 c
f
46.8179 73.4502 m
46.0239 73.4502 45.3779 74.0962 45.3779 74.8901 c
45.3779 75.6841 46.0239 76.3306 46.8179 76.3306 c
47.1396 76.3306 47.4341 76.2207 47.6738 76.042 C
47.7104 75.979 47.7407 75.9131 47.7939 75.8594 c
47.8477 75.8052 47.9136 75.7744 47.9766 75.7378 C
48.1514 75.499 48.2583 75.208 48.2583 74.8901 c
48.2583 74.0962 47.6118 73.4502 46.8179 73.4502 c
f
*U
*u
1 D
112.5078 96.4473 m
112.5078 96.5571 112.4863 96.667 112.4434 96.7705 c
112.4014 96.8711 112.3398 96.9609 112.2656 97.0381 c
112.2617 97.042 112.2607 97.0474 112.2568 97.0513 C
104.9951 104.313 L
104.9941 104.3135 l
104.9395 104.3682 104.8691 104.4053 104.8008 104.4438 c
104.7725 104.46 104.75 104.4854 104.7197 104.498 c
104.7188 104.499 104.7168 104.4985 104.7148 104.4995 c
104.6084 104.5435 104.4951 104.5664 104.3809 104.5659 C
75.6875 104.5659 L
75.6865 104.5659 75.6855 104.5659 75.6836 104.5659 C
75.6826 104.5659 L
75.6758 104.5659 75.6689 104.562 75.6621 104.5615 c
75.5566 104.5591 75.4521 104.54 75.3525 104.4995 c
75.2646 104.4629 75.1895 104.4067 75.1191 104.3452 c
75.1055 104.333 75.0879 104.3286 75.0742 104.3154 C
75.0723 104.3135 L
75.0713 104.3125 75.0703 104.312 V
69.5889 98.8706 L
69.2339 99.0459 68.8398 99.1538 68.418 99.1538 c
66.9492 99.1538 65.7544 97.959 65.7544 96.4902 c
65.7544 95.021 66.9492 93.8262 68.418 93.8262 c
69.8872 93.8262 71.082 95.021 71.082 96.4902 c
71.082 96.9058 70.978 97.2944 70.8076 97.645 C
76.0391 102.8384 L
103.5215 102.8384 L
103.5498 91.2651 L
102.79 90.9297 102.2578 90.1719 102.2578 89.29 c
102.2578 88.0991 103.2266 87.1299 104.418 87.1299 c
105.6094 87.1299 106.5781 88.0991 106.5781 89.29 c
106.5781 90.1758 106.042 90.9365 105.2783 91.27 C
105.2529 101.6108 L
110.7813 96.083 L
110.7568 77.3989 L
109.7119 77.0386 108.9541 76.0562 108.9541 74.8901 c
108.9541 73.4214 110.1494 72.2266 111.6182 72.2266 c
113.0869 72.2266 114.2822 73.4214 114.2822 74.8901 c
114.2822 76.0537 113.5273 77.0352 112.4854 77.397 C
112.5098 96.4395 L
112.5098 96.4424 112.5078 96.4443 112.5078 96.4473 c
f
0 D
68.418 95.0498 m
67.624 95.0498 66.978 95.6963 66.978 96.4902 c
66.978 97.2842 67.624 97.9302 68.418 97.9302 c
68.7397 97.9302 69.0342 97.8203 69.2744 97.6411 C
69.3105 97.5786 69.3408 97.5132 69.394 97.4595 c
69.4478 97.4053 69.5137 97.375 69.5762 97.3379 C
69.7515 97.0996 69.8584 96.8081 69.8584 96.4902 c
69.8584 95.6963 69.2119 95.0498 68.418 95.0498 c
f
104.418 88.2822 m
103.8623 88.2822 103.4102 88.7344 103.4102 89.29 c
103.4102 89.7891 103.7813 90.186 104.2578 90.2656 C
104.3105 90.2559 104.3584 90.2344 104.4141 90.2344 c
104.415 90.2344 104.415 90.2344 104.416 90.2344 c
104.4727 90.2344 104.5215 90.2563 104.5742 90.2666 C
105.0527 90.1885 105.4258 89.7905 105.4258 89.29 c
105.4258 88.7344 104.9736 88.2822 104.418 88.2822 c
f
113.0576 74.8901 m
113.0576 74.0962 112.4121 73.4502 111.6182 73.4502 c
110.8242 73.4502 110.1787 74.0962 110.1787 74.8901 c
110.1787 75.6123 110.7148 76.207 111.4092 76.3096 C
111.4785 76.2915 111.5449 76.2666 111.6201 76.2666 C
111.6211 76.2666 L
111.6953 76.2666 111.7617 76.291 111.8311 76.3091 C
112.5234 76.2051 113.0576 75.6113 113.0576 74.8901 c
f
*U
*u
1 D
126.9551 74.8916 m
126.9561 75.0039 126.9336 75.1162 126.8906 75.2217 c
126.8477 75.3271 126.7842 75.4224 126.7051 75.5024 C
126.7041 75.5029 126.7041 75.5039 126.7031 75.5049 C
119.7598 82.4482 L
119.7598 96.4829 L
119.7598 96.4932 119.7539 96.5015 119.7539 96.5112 c
119.751 96.6143 119.7334 96.7168 119.6934 96.8135 c
119.6494 96.9189 119.5859 97.0142 119.5068 97.0938 c
119.5059 97.0942 119.5059 97.0947 Y
104.9941 111.5757 L
104.9844 111.5859 104.9707 111.5889 104.96 111.5981 c
104.8867 111.6646 104.8057 111.7227 104.7129 111.7612 c
104.6162 111.8008 104.5137 111.8188 104.4111 111.8223 c
104.4014 111.8223 104.3936 111.8276 104.3838 111.8276 C
75.6846 111.8276 L
75.6836 111.8276 75.6816 111.8276 75.6807 111.8276 c
75.6777 111.8276 75.6748 111.8276 75.6719 111.8276 C
68.3232 111.7393 L
68.3218 111.7393 68.3203 111.7393 68.3193 111.7393 C
68.311 111.7393 L
68.2827 111.7388 68.2593 111.7251 68.2314 111.7222 c
68.1479 111.7134 68.0645 111.7031 67.9863 111.6699 c
67.9136 111.6392 67.854 111.5898 67.7935 111.5415 c
67.7666 111.5205 67.7349 111.5107 67.7104 111.4863 C
67.7031 111.4795 L
67.7031 111.479 L
60.7671 104.543 L
53.9316 104.543 L
53.8179 104.5435 53.7046 104.5205 53.5981 104.4761 c
53.4971 104.4341 53.4072 104.3726 53.3301 104.2979 c
53.3262 104.2944 53.3218 104.2935 53.3184 104.29 C
46.3755 97.3472 L
41.5967 97.3521 L
41.2627 98.1147 40.5024 98.6504 39.6182 98.6504 c
38.4272 98.6504 37.458 97.6812 37.458 96.4902 c
37.458 95.2993 38.4272 94.3301 39.6182 94.3301 c
40.501 94.3301 41.2593 94.8638 41.5942 95.6245 C
46.7319 95.6191 L
46.7324 95.6191 46.7329 95.6191 v
46.8457 95.6191 46.958 95.6421 47.0635 95.686 c
47.167 95.729 47.2603 95.791 47.3389 95.8687 c
47.3403 95.8701 47.3423 95.8706 47.3438 95.8721 C
54.2871 102.8154 L
61.125 102.8154 L
61.2378 102.8154 61.3501 102.8384 61.4556 102.8823 c
61.5571 102.9243 61.6479 102.9858 61.7256 103.0615 c
61.7285 103.0645 61.7329 103.0654 61.7358 103.0684 C
68.6836 110.0161 L
73.5723 110.0747 L
62.3799 98.8755 L
62.0273 99.0483 61.6362 99.1538 61.2178 99.1538 c
59.749 99.1538 58.5542 97.959 58.5542 96.4902 c
58.5542 95.021 59.749 93.8262 61.2178 93.8262 c
62.687 93.8262 63.8818 95.021 63.8818 96.4902 c
63.8818 96.9092 63.7759 97.3008 63.6025 97.6543 C
76.041 110.1001 L
104.0264 110.1001 L
118.0313 96.1245 L
118.0313 82.0903 L
118.0313 82.0786 118.0371 82.0693 118.0381 82.0576 c
118.042 81.9565 118.0586 81.8555 118.0977 81.7607 c
118.1396 81.6602 118.2002 81.5708 118.2744 81.4941 c
118.2793 81.4897 118.2803 81.4839 118.2842 81.4795 C
125.2246 74.5386 L
125.1445 62.5518 L
119.3447 68.3506 L
119.332 68.3633 119.3154 68.3672 119.3027 68.3789 c
119.2314 68.4419 119.1543 68.499 119.0654 68.5366 c
118.958 68.5811 118.8447 68.604 118.7305 68.6035 C
104.8711 68.6172 L
99.6172 73.7534 L
99.7822 74.0996 99.8818 74.4819 99.8818 74.8901 c
99.8818 76.0552 99.125 77.0371 98.082 77.3979 C
98.082 87.313 L
98.8438 87.6475 99.3779 88.4067 99.3779 89.29 c
99.3779 90.4814 98.4092 91.4507 97.2178 91.4507 c
96.0264 91.4507 95.0576 90.4814 95.0576 89.29 c
95.0576 88.4067 95.5918 87.6475 96.3535 87.313 C
96.3535 77.3979 L
95.3105 77.0371 94.5537 76.0552 94.5537 74.8901 c
94.5537 73.4214 95.749 72.2266 97.2178 72.2266 c
97.6475 72.2266 98.0479 72.3384 98.4082 72.52 C
103.9053 67.1455 L
103.9063 67.1445 103.9082 67.1436 103.9092 67.1421 C
103.915 67.1362 L
103.9385 67.1128 103.9697 67.104 103.9951 67.084 c
104.0566 67.0356 104.1172 66.9863 104.1904 66.9561 c
104.29 66.9155 104.3945 66.896 104.5 66.8936 c
104.5068 66.8936 104.5117 66.8901 104.5176 66.8901 C
118.375 66.8765 L
125.1309 60.1201 L
125.1309 31.9678 L
118.3818 25.3799 L
97.2949 25.3799 L
97.252 25.3799 97.2148 25.3613 97.1738 25.3555 c
97.1035 25.3457 97.0322 25.3408 96.9658 25.3135 c
96.8652 25.2725 96.7764 25.2109 96.6992 25.1367 c
96.6943 25.1328 96.6885 25.1318 96.6836 25.127 C
89.6748 18.1182 L
39.9067 18.1182 L
28.0264 30.0879 L
28.0264 34.498 L
22.4097 34.498 L
22.4097 28.8828 L
26.7881 28.8828 L
38.9341 16.6455 L
38.9346 16.6455 38.9351 16.6455 38.9351 16.6445 c
39.0146 16.5645 39.1104 16.501 39.2163 16.4561 c
39.3223 16.4121 39.4346 16.3896 39.5474 16.3896 C
90.0332 16.3896 L
90.1455 16.3896 90.2568 16.4121 90.3633 16.4561 c
90.4629 16.4971 90.5508 16.5586 90.6279 16.6318 c
90.6328 16.6367 90.6396 16.6377 90.6445 16.6426 C
97.6533 23.6514 L
118.7334 23.6514 L
118.8447 23.6514 118.9561 23.6748 119.0605 23.7178 c
119.1338 23.7471 119.1953 23.7969 119.2568 23.8447 c
119.2822 23.8652 119.3135 23.874 119.3369 23.8975 C
119.3428 23.9033 L
119.3438 23.9043 119.3447 23.9053 119.3457 23.9063 C
126.5986 30.9863 L
126.5996 30.9873 126.5996 30.9883 126.6006 30.9893 c
126.6816 31.0693 126.7471 31.1631 126.792 31.2695 c
126.8359 31.374 126.8574 31.4863 126.8584 31.5986 c
126.8584 31.6006 126.8594 31.6025 126.8594 31.6045 C
126.8594 60.4727 L
126.9561 74.8882 L
126.9561 74.8896 126.9551 74.8906 126.9551 74.8916 c
f
0 D
39.6182 95.4824 m
39.0625 95.4824 38.6104 95.9346 38.6104 96.4902 c
38.6104 97.0459 39.0625 97.498 39.6182 97.498 c
40.1182 97.498 40.5156 97.1255 40.5942 96.6475 C
40.584 96.5942 40.562 96.5454 40.562 96.4893 c
40.562 96.4331 40.5835 96.3843 40.5938 96.3311 C
40.5146 95.854 40.1172 95.4824 39.6182 95.4824 c
f
61.2178 95.0498 m
60.4238 95.0498 59.7778 95.6963 59.7778 96.4902 c
59.7778 97.2842 60.4238 97.9302 61.2178 97.9302 c
61.5376 97.9302 61.8306 97.8218 62.0703 97.6445 C
62.1064 97.582 62.1367 97.5166 62.1904 97.4634 c
62.2441 97.4102 62.3096 97.3799 62.3716 97.3433 C
62.5493 97.104 62.6582 96.8105 62.6582 96.4902 c
62.6582 95.6963 62.0117 95.0498 61.2178 95.0498 c
f
97.2178 90.2983 m
97.7734 90.2983 98.2256 89.8462 98.2256 89.29 c
98.2256 88.7905 97.8535 88.3931 97.376 88.3145 C
97.3232 88.3242 97.2734 88.3462 97.2178 88.3462 c
97.1621 88.3462 97.1123 88.3242 97.0596 88.3145 C
96.582 88.3931 96.21 88.7905 96.21 89.29 c
96.21 89.8462 96.6621 90.2983 97.2178 90.2983 c
f
95.7783 74.8901 m
95.7783 75.6118 96.3135 76.2061 97.0068 76.3091 C
97.0762 76.2915 97.1426 76.2666 97.2178 76.2666 c
97.293 76.2666 97.3594 76.2915 97.4287 76.3091 C
98.1221 76.2061 98.6572 75.6118 98.6572 74.8901 c
98.6572 74.5762 98.5537 74.2881 98.3828 74.0513 C
98.3203 74.0142 98.2559 73.9829 98.2021 73.9287 c
98.1504 73.8755 98.1211 73.811 98.0859 73.749 C
97.8438 73.5645 97.5449 73.4502 97.2178 73.4502 c
96.4238 73.4502 95.7783 74.0962 95.7783 74.8901 c
f
23.8501 31.6904 m
23.8501 32.4443 24.4634 33.0586 25.2178 33.0586 c
25.9722 33.0586 26.5859 32.4443 26.5859 31.6904 c
26.5859 31.3887 26.4844 31.1123 26.3184 30.8857 C
26.2559 30.8496 26.1899 30.8193 26.1362 30.7656 c
26.082 30.7119 26.0508 30.6455 26.0137 30.582 C
25.7891 30.4199 25.5151 30.3223 25.2178 30.3223 c
24.4634 30.3223 23.8501 30.9365 23.8501 31.6904 c
f
*U
*u
1 D
31.6294 74.6528 m
31.6401 74.6011 31.6411 74.5483 31.6611 74.499 c
31.6836 74.4443 31.7266 74.3989 31.7607 74.3491 c
31.791 74.3057 31.8096 74.2563 31.8481 74.2178 C
38.9365 67.1289 L
38.9395 67.126 38.9438 67.125 38.9468 67.1221 c
39.0244 67.0464 39.1152 66.9849 39.2168 66.9429 c
39.3223 66.8989 39.4346 66.876 39.5474 66.876 C
68.0596 66.876 L
75.0283 59.8174 L
75.0303 59.8154 75.0322 59.8154 75.0342 59.8135 c
75.1143 59.7344 75.208 59.6699 75.3135 59.627 c
75.4189 59.583 75.5313 59.5605 75.6436 59.5605 c
75.6475 59.5605 75.6514 59.5605 75.6553 59.5605 C
90.125 59.7617 L
94.8633 54.583 L
94.6504 54.1973 94.5186 53.7607 94.5186 53.29 c
94.5186 51.8018 95.7295 50.5908 97.2178 50.5908 c
98.707 50.5908 99.918 51.8018 99.918 53.29 c
99.918 54.7793 98.707 55.9902 97.2178 55.9902 c
96.8301 55.9902 96.4639 55.9053 96.1309 55.7578 C
92.4893 59.7363 L
103.9678 59.5654 L
109.46 54.1934 L
109.3438 53.915 109.2783 53.6104 109.2783 53.29 c
109.2783 52 110.3281 50.9502 111.6182 50.9502 c
112.9082 50.9502 113.958 52 113.958 53.29 c
113.958 54.5801 112.9082 55.6299 111.6182 55.6299 c
111.2803 55.6299 110.9609 55.5547 110.6709 55.4258 C
104.9297 61.042 L
104.8984 61.0723 104.8584 61.0859 104.8242 61.1104 c
104.7705 61.1504 104.7197 61.1934 104.6582 61.2188 c
104.5918 61.2471 104.5215 61.2539 104.4512 61.2646 c
104.4121 61.2705 104.3779 61.2881 104.3379 61.2891 C
90.5127 61.4951 L
90.5088 61.4951 90.5049 61.4922 90.501 61.4922 C
90.4961 61.4922 90.4932 61.4951 90.4883 61.4951 C
76 61.2939 L
69.2847 68.0947 L
69.2822 72.3828 L
70.3257 72.7441 71.0815 73.7256 71.0815 74.8901 c
71.0815 76.3594 69.8867 77.5542 68.418 77.5542 c
66.9492 77.5542 65.7544 76.3594 65.7544 74.8901 c
65.7544 73.7251 66.5107 72.7432 67.5547 72.3823 C
67.5566 68.6035 L
39.9053 68.6035 L
33.6729 74.8364 L
40.1528 81.4873 L
40.1787 81.5137 40.189 81.5479 40.2109 81.5771 c
40.2554 81.6357 40.3018 81.6929 40.3306 81.7627 c
40.3564 81.8257 40.3618 81.8916 40.3721 81.958 c
40.3789 81.9995 40.3975 82.0366 40.3979 82.0801 C
40.459 87.3003 L
41.2334 87.6289 41.7783 88.397 41.7783 89.29 c
41.7783 90.4814 40.8091 91.4507 39.6182 91.4507 c
38.4272 91.4507 37.458 90.4814 37.458 89.29 c
37.458 88.416 37.9824 87.665 38.7314 87.3252 C
38.6743 82.4458 L
31.8403 75.4316 L
31.7993 75.3896 31.7793 75.3369 31.7485 75.2896 c
31.7178 75.2422 31.6777 75.1992 31.6572 75.1479 c
31.6357 75.0947 31.6348 75.0371 31.625 74.9814 c
31.6152 74.9282 31.5957 74.877 31.5962 74.8232 c
31.5967 74.7651 31.6172 74.71 31.6294 74.6528 c
f
0 D
98.4785 53.29 m
98.4785 52.5957 97.9131 52.0303 97.2178 52.0303 c
96.5234 52.0303 95.958 52.5957 95.958 53.29 c
95.958 53.5928 96.0791 53.8604 96.2578 54.0771 C
96.3096 54.1074 96.3643 54.1299 96.4102 54.1719 c
96.4512 54.209 96.4717 54.2578 96.5039 54.3008 C
96.71 54.4463 96.9473 54.5508 97.2178 54.5508 c
97.9131 54.5508 98.4785 53.9854 98.4785 53.29 c
f
112.6104 53.29 m
112.6104 52.7432 112.165 52.2979 111.6182 52.2979 c
111.0713 52.2979 110.626 52.7432 110.626 53.29 c
110.626 53.502 110.708 53.6885 110.8213 53.8496 C
110.8652 53.8809 110.915 53.8994 110.9541 53.9395 c
110.9941 53.9795 111.0127 54.0303 111.043 54.0762 C
111.207 54.1963 111.3994 54.2822 111.6182 54.2822 c
112.165 54.2822 112.6104 53.8369 112.6104 53.29 c
f
66.978 74.8901 m
66.978 75.6841 67.624 76.3306 68.418 76.3306 c
69.2119 76.3306 69.8579 75.6841 69.8579 74.8901 c
69.8579 74.1685 69.3228 73.5752 68.6294 73.4717 C
68.5605 73.4893 68.4932 73.5142 68.4185 73.5142 C
68.418 73.5142 L
68.3433 73.5142 68.2764 73.4893 68.207 73.4717 C
67.5137 73.5747 66.978 74.1685 66.978 74.8901 c
f
39.6182 90.2983 m
40.1738 90.2983 40.626 89.8462 40.626 89.29 c
40.626 88.7871 40.249 88.3867 39.7666 88.3125 C
39.7129 88.3232 39.6641 88.3457 39.6074 88.3462 c
39.5508 88.3472 39.5015 88.3262 39.4478 88.3169 C
38.9761 88.4004 38.6104 88.7949 38.6104 89.29 c
38.6104 89.8462 39.0625 90.2983 39.6182 90.2983 c
f
*U
*u
1 D
83.2227 88.4473 m
88.0371 88.4326 L
88.3691 87.6675 89.1309 87.1299 90.0176 87.1299 c
91.209 87.1299 92.1777 88.0991 92.1777 89.29 c
92.1777 90.4814 91.209 91.4507 90.0176 91.4507 c
89.1357 91.4507 88.3789 90.9185 88.0439 90.1602 C
82.8682 90.1758 L
82.8682 90.1758 l
82.7539 90.1763 82.6406 90.1533 82.5342 90.1089 c
82.4336 90.0669 82.3428 90.0054 82.2656 89.9307 c
82.2617 89.9272 82.2578 89.9263 82.2539 89.9229 C
75.0322 82.7012 L
75.0146 82.6836 75.0088 82.6606 74.9932 82.6421 c
74.9355 82.5747 74.8818 82.5044 74.8467 82.4219 c
74.8125 82.3394 74.8018 82.2524 74.7939 82.165 c
74.792 82.1401 74.7793 82.1187 74.7793 82.0933 C
74.7627 77.4004 L
73.7148 77.042 72.9541 76.0586 72.9541 74.8901 c
72.9541 73.4214 74.1494 72.2266 75.6182 72.2266 c
77.0869 72.2266 78.2822 73.4214 78.2822 74.8901 c
78.2822 76.0518 77.5303 77.0317 76.4912 77.395 C
76.5068 81.731 L
83.2227 88.4473 L
f
0 D
90.0176 90.2983 m
90.5732 90.2983 91.0254 89.8462 91.0254 89.29 c
91.0254 88.7344 90.5732 88.2822 90.0176 88.2822 c
89.5176 88.2822 89.1191 88.6553 89.041 89.1338 C
89.0518 89.1875 89.0742 89.2368 89.0742 89.2935 c
89.0742 89.3496 89.0527 89.3989 89.043 89.4521 C
89.123 89.9282 89.5195 90.2983 90.0176 90.2983 c
f
77.0576 74.8901 m
77.0576 74.0962 76.4121 73.4502 75.6182 73.4502 c
74.8242 73.4502 74.1777 74.0962 74.1777 74.8901 c
74.1777 75.6138 74.7168 76.209 75.4131 76.3096 C
75.4814 76.292 75.5488 76.2666 75.623 76.2666 c
75.624 76.2666 75.625 76.2666 75.626 76.2666 c
75.7002 76.2666 75.7656 76.291 75.835 76.3086 C
76.5254 76.2031 77.0576 75.6099 77.0576 74.8901 c
f
*U
U
u
38.3359 -16.3291 m
28.1992 -16.3291 L
28.1992 3.94434 L
23.1299 3.94434 L
23.1299 -31.5352 L
28.1992 -31.5352 L
28.1992 -21.3975 L
38.3359 -21.3975 L
38.3359 -31.5352 L
43.4043 -31.5352 L
43.4043 3.94434 L
38.3359 3.94434 L
38.3359 -16.3291 L
f
63.6787 3.94434 m
63.6787 -16.3291 L
53.542 -16.3291 L
53.542 3.94434 L
63.6787 3.94434 L
63.6787 9.0127 L
53.542 9.0127 L
48.4736 9.0127 L
48.4736 -31.5352 L
53.542 -31.5352 L
53.542 -21.3975 L
63.6787 -21.3975 L
63.6787 -16.4092 L
68.7451 -16.4092 L
68.7451 3.94434 L
63.6787 3.94434 L
f
38.3359 9.0127 m
28.1992 9.0127 L
28.1992 3.94434 L
38.3359 3.94434 L
38.3359 9.0127 L
f
U
u
*u
60.3477 -29.5791 m
61.4766 -29.5791 L
61.5391 -29.5791 61.6279 -29.5918 61.7432 -29.6191 c
61.7383 -29.21 L
61.7383 -29.1318 61.71 -29.0645 61.6523 -29.0088 c
61.5977 -28.9512 61.5293 -28.9229 61.4492 -28.9229 c
60.3535 -28.9229 L
60.2754 -28.9229 60.208 -28.8945 60.1514 -28.8389 c
60.0938 -28.7803 60.0654 -28.7129 60.0654 -28.6367 c
60.0654 -28.5557 60.0938 -28.4873 60.1494 -28.4316 c
60.2051 -28.375 60.2725 -28.3477 60.3535 -28.3477 c
61.4482 -28.3477 L
61.6865 -28.3477 61.8906 -28.4316 62.0566 -28.5986 c
62.2275 -28.7646 62.3135 -28.9688 62.3213 -29.21 c
62.3926 -31.3672 L
62.3926 -31.4473 62.3643 -31.5146 62.3057 -31.5723 c
62.25 -31.6279 62.1836 -31.6563 62.1045 -31.6563 c
62.0215 -31.6563 61.9521 -31.6279 61.8965 -31.5723 c
61.8379 -31.5146 61.8096 -31.4473 61.8096 -31.3672 c
61.3213 -31.6563 L
60.3477 -31.6563 L
60.1064 -31.6563 59.8994 -31.5703 59.7295 -31.4023 c
59.5615 -31.2324 59.4756 -31.0273 59.4756 -30.7852 c
59.4756 -30.4482 L
59.4756 -30.208 59.5615 -30.0049 59.7305 -29.834 c
59.9004 -29.6631 60.1074 -29.5791 60.3477 -29.5791 c
f
1 D
61.7871 -30.6992 m
61.7695 -30.4551 L
61.7666 -30.374 61.7393 -30.3047 61.6846 -30.251 c
61.6289 -30.1953 61.5625 -30.1689 61.4834 -30.1689 c
60.3457 -30.1689 L
60.2666 -30.1689 60.1982 -30.1963 60.1426 -30.252 c
60.0859 -30.3076 60.0586 -30.376 60.0586 -30.4551 c
60.0586 -30.7783 L
60.0586 -30.8555 60.0869 -30.9229 60.1445 -30.9805 c
60.2012 -31.0381 60.2686 -31.0654 60.3457 -31.0654 c
61.1602 -31.0654 l
61.7871 -30.6992 L
f
*U
*u
0 D
64.3193 -27.3877 m
64.3193 -28.7422 L
64.5723 -28.54 L
64.7324 -28.4082 64.8994 -28.3398 65.0693 -28.3398 c
65.5977 -28.3398 L
65.793 -28.3398 65.9639 -28.4082 66.1152 -28.54 c
66.3906 -28.7773 L
66.4658 -28.8408 66.5283 -28.9375 66.5762 -29.0605 c
66.625 -29.1846 66.6494 -29.3047 66.6494 -29.4238 c
66.6494 -30.5898 L
66.6494 -30.6943 66.6279 -30.8057 66.5811 -30.9219 c
66.5352 -31.0381 66.4844 -31.124 66.4248 -31.1797 c
66.1738 -31.415 L
66.1094 -31.4766 66.0186 -31.5322 65.9004 -31.583 c
65.7813 -31.6309 65.6797 -31.6563 65.5977 -31.6563 c
65.1045 -31.6563 L
64.8643 -31.6563 64.6025 -31.5225 64.3193 -31.2539 c
64.3193 -31.3672 L
64.3193 -31.4473 64.291 -31.5146 64.2334 -31.5723 c
64.1777 -31.6279 64.1113 -31.6563 64.0322 -31.6563 c
63.9512 -31.6563 63.8818 -31.6279 63.8262 -31.5723 c
63.7705 -31.5146 63.7441 -31.4473 63.7441 -31.3672 c
63.7441 -27.3877 L
63.7441 -27.3076 63.7705 -27.2393 63.8301 -27.1836 c
63.8848 -27.1279 63.9531 -27.0996 64.0322 -27.0996 c
64.1113 -27.0996 64.1777 -27.1279 64.2334 -27.1836 c
64.291 -27.2393 64.3193 -27.3076 64.3193 -27.3877 c
f
1 D
65.5527 -28.9229 m
65.1553 -28.9229 L
65.0605 -28.9229 64.9873 -28.9453 64.9355 -28.9883 c
64.4189 -29.4297 L
64.3506 -29.4902 64.3193 -29.5791 64.3193 -29.6982 c
64.3193 -30.3486 L
64.3193 -30.4453 64.3574 -30.5264 64.4316 -30.5898 c
64.8945 -30.9805 L
64.9609 -31.041 65.0303 -31.0732 65.1045 -31.0732 c
65.5732 -31.0732 L
65.6406 -31.0732 65.6963 -31.0527 65.7461 -31.0107 c
65.9746 -30.8057 L
66.0361 -30.7588 66.0684 -30.6943 66.0684 -30.6104 c
66.0684 -29.3965 L
66.0684 -29.3018 66.0361 -29.2285 65.9746 -29.1768 c
65.7666 -29.002 l
65.7021 -28.9502 65.6318 -28.9229 65.5527 -28.9229 c
f
*U
*u
0 D
70.293 -31.6484 m
68.5381 -31.6484 L
68.459 -31.6484 68.3916 -31.6211 68.3369 -31.5645 c
68.2793 -31.5088 68.251 -31.4404 68.251 -31.3613 c
68.251 -31.2832 68.2793 -31.2158 68.3369 -31.1592 c
68.3916 -31.1016 68.459 -31.0732 68.5381 -31.0732 c
69.1289 -31.0732 L
69.1289 -28.9229 L
68.5459 -28.9229 L
68.4648 -28.9229 68.3975 -28.8945 68.3418 -28.8389 c
68.2861 -28.7803 68.2568 -28.7129 68.2568 -28.6367 c
68.2568 -28.5557 68.2861 -28.4873 68.3418 -28.4287 c
68.3975 -28.3701 68.4648 -28.3398 68.5459 -28.3398 c
69.4238 -28.3398 L
69.5039 -28.3398 69.5713 -28.3701 69.6279 -28.4287 c
69.6836 -28.4873 69.7119 -28.5557 69.7119 -28.6367 c
69.7119 -31.0732 L
70.2871 -31.0732 L
70.3662 -31.0732 70.4375 -31.1006 70.4961 -31.1553 c
70.5527 -31.2139 70.582 -31.2803 70.582 -31.3613 c
70.582 -31.4404 70.5547 -31.5088 70.4961 -31.5645 c
70.4395 -31.6211 70.3721 -31.6484 70.293 -31.6484 c
f
69.1211 -26.8457 m
69.4238 -26.8457 L
69.5039 -26.8457 69.5713 -26.874 69.6279 -26.9316 c
69.6836 -26.9873 69.7119 -27.0537 69.7119 -27.1328 c
69.7119 -27.3809 L
69.7119 -27.4609 69.6836 -27.5303 69.6279 -27.5879 c
69.5713 -27.6465 69.5039 -27.6748 69.4238 -27.6748 c
69.1162 -27.6748 L
69.0342 -27.6748 68.9629 -27.6465 68.9072 -27.5879 c
68.8516 -27.5273 68.8252 -27.4609 68.8262 -27.3877 c
68.834 -27.1328 L
68.834 -27.0537 68.8623 -26.9873 68.918 -26.9316 c
68.9746 -26.874 69.042 -26.8457 69.1211 -26.8457 c
f
*U
*u
73.0156 -28.3477 m
74.3369 -28.3477 L
74.542 -28.3477 74.7236 -28.4082 74.8818 -28.5303 c
75.0381 -28.6543 75.1172 -28.7725 75.1172 -28.8887 c
75.1172 -28.9717 75.0889 -29.0391 75.0303 -29.0908 c
74.9717 -29.1436 74.9082 -29.1699 74.8359 -29.1699 c
74.7441 -29.1699 74.6611 -29.1289 74.585 -29.0469 c
74.5088 -28.9648 74.4316 -28.9229 74.3486 -28.9229 c
73.0469 -28.9229 L
72.9189 -28.9229 72.8535 -28.9766 72.8535 -29.083 c
72.8535 -29.1572 72.8984 -29.2129 72.9834 -29.2529 c
74.5137 -29.9336 L
74.6689 -30.0029 74.7969 -30.1133 74.8955 -30.2646 c
74.9961 -30.417 75.0459 -30.5869 75.0459 -30.7705 c
75.0459 -31.0186 74.958 -31.2266 74.7822 -31.3975 c
74.6094 -31.5693 74.4092 -31.6563 74.1875 -31.6563 c
73.0225 -31.6563 L
72.8223 -31.6563 72.6348 -31.5957 72.4619 -31.4736 c
72.29 -31.3516 72.2041 -31.2344 72.2041 -31.1211 c
72.2041 -31.0449 72.2314 -30.9795 72.2871 -30.9209 c
72.3447 -30.8623 72.416 -30.832 72.5049 -30.832 c
72.5791 -30.832 72.6572 -30.873 72.7393 -30.957 c
72.8232 -31.0381 72.9453 -31.0791 73.1016 -31.0791 c
74.1748 -31.0791 L
74.2588 -31.0791 74.3301 -31.0479 74.3867 -30.9814 c
74.4453 -30.918 74.4727 -30.8428 74.4727 -30.7578 c
74.4727 -30.6279 74.4092 -30.5332 74.2813 -30.4756 c
72.7344 -29.7803 L
72.5859 -29.7148 72.4717 -29.6182 72.3906 -29.4922 c
72.3115 -29.3652 72.2705 -29.2402 72.2705 -29.1084 c
72.2705 -28.9023 72.3447 -28.7236 72.4863 -28.5742 c
72.6289 -28.4229 72.8057 -28.3477 73.0156 -28.3477 c
f
*U
*u
76.3789 -31.3672 m
76.3789 -28.6367 L
76.3789 -28.5557 76.4072 -28.4873 76.4639 -28.4316 c
76.5195 -28.375 76.5869 -28.3477 76.666 -28.3477 c
76.8154 -28.3477 76.9092 -28.4209 76.9473 -28.5664 c
77.1084 -28.416 77.2861 -28.3398 77.4814 -28.3398 c
77.7119 -28.3398 77.9023 -28.4395 78.0498 -28.6367 c
78.2334 -28.4395 78.4336 -28.3398 78.6523 -28.3398 c
78.8311 -28.3398 78.9854 -28.4053 79.1162 -28.5303 c
79.248 -28.6572 79.3174 -28.8203 79.3271 -29.0156 c
79.4082 -31.3672 L
79.4082 -31.4453 79.3809 -31.5117 79.3232 -31.5693 c
79.2666 -31.626 79.1992 -31.6563 79.1211 -31.6563 c
79.042 -31.6563 78.9717 -31.626 78.916 -31.5693 c
78.8574 -31.5117 78.8281 -31.4453 78.8252 -31.3672 c
78.7578 -29.1084 L
78.7539 -28.9854 78.7158 -28.9229 78.6436 -28.9229 c
78.6055 -28.9229 78.5664 -28.9404 78.5254 -28.9756 c
78.1826 -29.2637 L
78.1826 -31.3672 L
78.1826 -31.4453 78.1543 -31.5117 78.0986 -31.5654 c
78.042 -31.6221 77.9736 -31.6484 77.8936 -31.6484 c
77.8154 -31.6484 77.749 -31.6211 77.6914 -31.5645 c
77.6348 -31.5088 77.6064 -31.4404 77.6064 -31.3613 c
77.6064 -29.0703 L
77.6064 -28.9736 77.5635 -28.9229 77.4814 -28.9229 c
77.4395 -28.9229 77.4014 -28.9375 77.3662 -28.9678 c
76.9551 -29.3174 L
76.9551 -31.3672 L
76.9551 -31.4453 76.9268 -31.5117 76.873 -31.5693 c
76.8184 -31.626 76.751 -31.6563 76.6729 -31.6563 c
76.5928 -31.6563 76.5254 -31.626 76.4668 -31.5693 c
76.4082 -31.5117 76.3789 -31.4453 76.3789 -31.3672 c
f
*U
*u
83.5908 -29.3857 m
83.5908 -30.6035 L
83.5908 -30.8623 83.4697 -31.1006 83.2256 -31.3203 c
82.9834 -31.5391 82.7314 -31.6484 82.4736 -31.6484 c
81.7998 -31.6484 L
81.5352 -31.6484 81.2832 -31.5371 81.043 -31.3145 c
80.8047 -31.0918 80.6846 -30.8545 80.6846 -30.6035 c
80.6846 -29.3857 L
80.6846 -29.1338 80.8018 -28.8975 81.0361 -28.6748 c
81.2695 -28.4512 81.5244 -28.3398 81.7998 -28.3398 c
82.4736 -28.3398 L
82.7314 -28.3359 82.9834 -28.4434 83.2256 -28.6631 c
83.4697 -28.8818 83.5908 -29.123 83.5908 -29.3857 c
f
1 D
81.2656 -29.4092 m
81.2656 -30.5752 L
81.2656 -30.6816 81.3037 -30.7656 81.3799 -30.8262 c
81.5967 -31.0107 L
81.6445 -31.0527 81.7109 -31.0732 81.7998 -31.0732 c
82.4668 -31.0732 L
82.5654 -31.0732 82.6553 -31.0381 82.7344 -30.9668 c
82.9102 -30.8115 L
82.9805 -30.7578 83.0156 -30.6816 83.0156 -30.583 c
83.0156 -29.417 L
83.0156 -29.3027 82.9805 -29.2178 82.9102 -29.1641 c
82.708 -29.002 L
82.6377 -28.9453 82.5586 -28.918 82.4668 -28.918 c
81.8701 -28.918 L
81.7412 -28.918 81.6396 -28.9473 81.5674 -29.0088 c
81.374 -29.1768 l
81.3027 -29.2373 81.2656 -29.3145 81.2656 -29.4092 c
f
*U
*u
0 D
92.0723 -29.3584 m
92.0723 -29.6123 L
92.0723 -29.6924 92.0439 -29.7617 91.9883 -29.8203 c
91.9326 -29.8789 91.8633 -29.9082 91.7842 -29.9082 c
89.46 -29.9082 L
89.3789 -29.9082 89.3115 -29.8789 89.2559 -29.8203 c
89.2002 -29.7617 89.1719 -29.6924 89.1719 -29.6123 c
89.1719 -29.3584 L
89.1719 -29.2783 89.2002 -29.21 89.2559 -29.1543 c
89.3115 -29.0986 89.3789 -29.0703 89.46 -29.0703 c
91.7842 -29.0703 L
91.8584 -29.0703 91.9238 -29.0977 91.9824 -29.1514 c
92.042 -29.2051 92.0723 -29.2744 92.0723 -29.3584 c
f
*U
*u
98.2354 -31.3262 m
98.2354 -32.6016 L
98.2354 -32.6846 98.207 -32.7539 98.1514 -32.8115 c
98.0957 -32.8672 98.0273 -32.8965 97.9482 -32.8965 c
97.8672 -32.8965 97.7979 -32.8672 97.7393 -32.8115 c
97.6826 -32.7539 97.6533 -32.6846 97.6533 -32.6016 c
97.6533 -28.4951 L
97.6533 -28.416 97.6807 -28.3496 97.7383 -28.2939 c
97.7949 -28.2354 97.8662 -28.207 97.9482 -28.207 c
98.0264 -28.207 98.0928 -28.2354 98.1494 -28.2939 c
98.207 -28.3496 98.2354 -28.416 98.2354 -28.4951 c
98.2354 -28.6807 L
98.5146 -28.3701 98.79 -28.2148 99.0605 -28.2148 c
99.1953 -28.2148 L
99.3984 -28.2148 99.585 -28.2891 99.7578 -28.4395 c
100.2373 -28.8545 L
100.4473 -29.0371 100.5527 -29.2686 100.5527 -29.5508 c
100.5527 -30.4482 L
100.5527 -30.7324 100.4395 -30.9717 100.2139 -31.165 c
99.7441 -31.5693 L
99.5889 -31.7109 99.3916 -31.7832 99.1553 -31.7832 c
99.0273 -31.7832 L
98.8037 -31.7832 98.6143 -31.7041 98.459 -31.5488 c
98.2354 -31.3262 L
f
1 D
99.0479 -31.2002 m
99.1953 -31.2002 L
99.2666 -31.2002 99.3408 -31.165 99.4219 -31.0938 c
99.8721 -30.6992 L
99.9463 -30.6406 99.9844 -30.5586 99.9844 -30.4551 c
99.9844 -29.5264 L
99.9844 -29.4365 99.9414 -29.3545 99.8564 -29.2842 c
99.373 -28.8682 L
99.3193 -28.8203 99.2588 -28.7979 99.1953 -28.7979 c
99.0273 -28.7979 L
98.9629 -28.7979 98.8799 -28.8506 98.7773 -28.9541 c
98.3496 -29.3789 L
98.2734 -29.4541 98.2354 -29.5391 98.2354 -29.6328 c
98.2354 -30.3691 L
98.2354 -30.458 98.2783 -30.5469 98.3623 -30.6299 c
98.7773 -31.0449 l
98.8799 -31.1484 98.9707 -31.2002 99.0479 -31.2002 c
f
*U
*u
0 D
101.8936 -31.3672 m
101.8936 -28.6367 L
101.8936 -28.5557 101.9209 -28.4873 101.9766 -28.4287 c
102.0342 -28.3701 102.1006 -28.3398 102.1816 -28.3398 c
102.2607 -28.3398 102.3291 -28.3701 102.3857 -28.4258 c
102.4414 -28.4844 102.4688 -28.5537 102.4688 -28.6367 c
102.4688 -28.9951 L
102.9395 -28.5947 L
103.1328 -28.4297 103.3223 -28.3477 103.5078 -28.3477 c
103.9297 -28.3477 L
104.167 -28.3477 104.3701 -28.4316 104.541 -28.6016 c
104.709 -28.7715 104.7939 -28.9736 104.7939 -29.21 c
104.7939 -29.3652 L
104.7939 -29.4473 104.7656 -29.5186 104.709 -29.5742 c
104.6533 -29.6328 104.585 -29.6602 104.5059 -29.6602 c
104.4268 -29.6602 104.3574 -29.6328 104.3018 -29.5771 c
104.2461 -29.5205 104.2178 -29.4521 104.2178 -29.3711 c
104.2178 -29.21 L
104.2178 -29.1318 104.1904 -29.0645 104.1338 -29.0088 c
104.0781 -28.9512 104.0098 -28.9229 103.9297 -28.9229 c
103.5557 -28.9229 L
103.4746 -28.9229 103.3877 -28.9658 103.2891 -29.0498 c
102.4688 -29.7598 L
102.4688 -31.3672 L
102.4688 -31.4473 102.4414 -31.5146 102.3848 -31.5723 c
102.3271 -31.6279 102.2598 -31.6563 102.1816 -31.6563 c
102.1006 -31.6563 102.0342 -31.6279 101.9766 -31.5723 c
101.9209 -31.5146 101.8936 -31.4473 101.8936 -31.3672 c
f
*U
*u
109.0332 -29.3857 m
109.0332 -30.6035 L
109.0332 -30.8623 108.9121 -31.1006 108.6689 -31.3203 c
108.4258 -31.5391 108.1748 -31.6484 107.915 -31.6484 c
107.2402 -31.6484 L
106.9775 -31.6484 106.7256 -31.5371 106.4873 -31.3145 c
106.2471 -31.0918 106.127 -30.8545 106.127 -30.6035 c
106.127 -29.3857 L
106.127 -29.1338 106.2441 -28.8975 106.4785 -28.6748 c
106.7129 -28.4512 106.9668 -28.3398 107.2402 -28.3398 c
107.915 -28.3398 L
108.1748 -28.3359 108.4258 -28.4434 108.6689 -28.6631 c
108.9121 -28.8818 109.0332 -29.123 109.0332 -29.3857 c
f
1 D
106.71 -29.4092 m
106.71 -30.5752 L
106.71 -30.6816 106.748 -30.7656 106.8223 -30.8262 c
107.0381 -31.0107 L
107.0869 -31.0527 107.1533 -31.0732 107.2402 -31.0732 c
107.9102 -31.0732 L
108.0078 -31.0732 108.0977 -31.0381 108.1768 -30.9668 c
108.3525 -30.8115 L
108.4219 -30.7578 108.457 -30.6816 108.457 -30.583 c
108.457 -29.417 L
108.457 -29.3027 108.4219 -29.2178 108.3525 -29.1641 c
108.1494 -29.002 L
108.0811 -28.9453 108.001 -28.918 107.9102 -28.918 c
107.3135 -28.918 L
107.1836 -28.918 107.082 -28.9473 107.0117 -29.0088 c
106.8154 -29.1768 l
106.7451 -29.2373 106.71 -29.3145 106.71 -29.4092 c
f
0 D
108.3623 -27.1279 m
108.4033 -27.1094 108.4463 -27.0996 108.4883 -27.0996 c
108.5713 -27.0996 108.6377 -27.1299 108.6904 -27.1904 c
108.7441 -27.25 108.7695 -27.3193 108.7695 -27.3945 c
108.7695 -27.5166 108.7158 -27.6045 108.6094 -27.6543 c
107.5625 -28.1387 L
107.5215 -28.1563 107.4795 -28.166 107.4365 -28.166 c
107.3545 -28.166 107.2881 -28.1357 107.2344 -28.0752 c
107.1816 -28.0156 107.1553 -27.9463 107.1553 -27.8711 c
107.1553 -27.749 107.21 -27.6602 107.3164 -27.6113 c
108.3623 -27.1279 L
f
*U
*u
111.876 -30.4141 m
110.9336 -31.5352 L
110.8721 -31.6162 110.7939 -31.6563 110.7031 -31.6563 c
110.6211 -31.6563 110.5527 -31.626 110.4971 -31.5693 c
110.4424 -31.5117 110.415 -31.4434 110.415 -31.3613 c
110.415 -31.2881 110.4346 -31.2295 110.4707 -31.1855 c
111.5068 -29.9502 L
110.5498 -28.8135 L
110.5059 -28.7637 110.4834 -28.7061 110.4834 -28.6426 c
110.4834 -28.5664 110.5107 -28.499 110.5645 -28.4385 c
110.6182 -28.3779 110.6875 -28.3477 110.7705 -28.3477 c
110.8682 -28.3477 110.9453 -28.3848 111.0039 -28.4541 c
111.873 -29.502 L
112.7666 -28.4463 L
112.8223 -28.3809 112.8896 -28.3477 112.9727 -28.3477 c
113.0469 -28.3477 113.1123 -28.373 113.1719 -28.4258 c
113.2305 -28.4746 113.2607 -28.543 113.2607 -28.6221 c
113.2607 -28.6992 113.248 -28.7539 113.2227 -28.7822 c
112.249 -29.9551 L
113.2705 -31.1855 L
113.3096 -31.2295 113.3291 -31.2832 113.3291 -31.3486 c
113.3291 -31.4355 113.2998 -31.5088 113.2422 -31.5674 c
113.1836 -31.626 113.1162 -31.6563 113.042 -31.6563 c
112.9521 -31.6563 112.874 -31.6162 112.8086 -31.5352 c
111.876 -30.4141 L
f
*U
*u
116.9385 -31.6484 m
115.1836 -31.6484 L
115.1045 -31.6484 115.0352 -31.6211 114.9795 -31.5645 c
114.9238 -31.5088 114.8955 -31.4404 114.8955 -31.3613 c
114.8955 -31.2832 114.9238 -31.2158 114.9795 -31.1592 c
115.0352 -31.1016 115.1045 -31.0732 115.1836 -31.0732 c
115.7734 -31.0732 L
115.7734 -28.9229 L
115.1904 -28.9229 L
115.1094 -28.9229 115.043 -28.8945 114.9873 -28.8389 c
114.9307 -28.7803 114.9023 -28.7129 114.9023 -28.6367 c
114.9023 -28.5557 114.9307 -28.4873 114.9873 -28.4287 c
115.043 -28.3701 115.1094 -28.3398 115.1904 -28.3398 c
116.0684 -28.3398 L
116.1475 -28.3398 116.2168 -28.3701 116.2725 -28.4287 c
116.3281 -28.4873 116.3555 -28.5557 116.3555 -28.6367 c
116.3555 -31.0732 L
116.9316 -31.0732 L
117.0117 -31.0732 117.0801 -31.1006 117.1387 -31.1553 c
117.1973 -31.2139 117.2275 -31.2803 117.2275 -31.3613 c
117.2275 -31.4404 117.1973 -31.5088 117.1406 -31.5645 c
117.084 -31.6211 117.0166 -31.6484 116.9385 -31.6484 c
f
115.7666 -26.8457 m
116.0684 -26.8457 L
116.1475 -26.8457 116.2168 -26.874 116.2725 -26.9316 c
116.3281 -26.9873 116.3555 -27.0537 116.3555 -27.1328 c
116.3555 -27.3809 L
116.3555 -27.4609 116.3281 -27.5303 116.2725 -27.5879 c
116.2168 -27.6465 116.1475 -27.6748 116.0684 -27.6748 c
115.7588 -27.6748 L
115.6768 -27.6748 115.6084 -27.6465 115.5527 -27.5879 c
115.4961 -27.5273 115.4688 -27.4609 115.4727 -27.3877 c
115.4785 -27.1328 L
115.4785 -27.0537 115.5059 -26.9873 115.5625 -26.9316 c
115.6182 -26.874 115.6865 -26.8457 115.7666 -26.8457 c
f
*U
*u
118.7832 -31.3672 m
118.7832 -28.6367 L
118.7832 -28.5557 118.8105 -28.4873 118.8662 -28.4316 c
118.9229 -28.375 118.9912 -28.3477 119.0713 -28.3477 c
119.2197 -28.3477 119.3125 -28.4209 119.3506 -28.5664 c
119.5107 -28.416 119.6895 -28.3398 119.8857 -28.3398 c
120.1162 -28.3398 120.3066 -28.4395 120.4551 -28.6367 c
120.6377 -28.4395 120.8379 -28.3398 121.0566 -28.3398 c
121.2354 -28.3398 121.3896 -28.4053 121.5215 -28.5303 c
121.6514 -28.6572 121.7217 -28.8203 121.7305 -29.0156 c
121.8145 -31.3672 L
121.8145 -31.4453 121.7842 -31.5117 121.7275 -31.5693 c
121.6699 -31.626 121.6035 -31.6563 121.5254 -31.6563 c
121.4453 -31.6563 121.377 -31.626 121.3203 -31.5693 c
121.2627 -31.5117 121.2324 -31.4453 121.2314 -31.3672 c
121.1621 -29.1084 L
121.1582 -28.9854 121.1201 -28.9229 121.0488 -28.9229 c
121.0098 -28.9229 120.9697 -28.9404 120.9287 -28.9756 c
120.5859 -29.2637 L
120.5859 -31.3672 L
120.5859 -31.4453 120.5586 -31.5117 120.5029 -31.5654 c
120.4453 -31.6221 120.3789 -31.6484 120.2979 -31.6484 c
120.2207 -31.6484 120.1523 -31.6211 120.0957 -31.5645 c
120.0381 -31.5088 120.0107 -31.4404 120.0107 -31.3613 c
120.0107 -29.0703 L
120.0107 -28.9736 119.9688 -28.9229 119.8848 -28.9229 c
119.8438 -28.9229 119.8057 -28.9375 119.7725 -28.9678 c
119.3584 -29.3174 L
119.3584 -31.3672 L
119.3584 -31.4453 119.3311 -31.5117 119.2764 -31.5693 c
119.2227 -31.626 119.1553 -31.6563 119.0781 -31.6563 c
118.999 -31.6563 118.9277 -31.626 118.8711 -31.5693 c
118.8125 -31.5117 118.7832 -31.4453 118.7832 -31.3672 c
f
*U
*u
125.9951 -29.3857 m
125.9951 -30.6035 L
125.9951 -30.8623 125.873 -31.1006 125.6309 -31.3203 c
125.3867 -31.5391 125.1367 -31.6484 124.877 -31.6484 c
124.2021 -31.6484 L
123.9404 -31.6484 123.6895 -31.5371 123.4492 -31.3145 c
123.209 -31.0918 123.0879 -30.8545 123.0879 -30.6035 c
123.0879 -29.3857 L
123.0879 -29.1338 123.2051 -28.8975 123.4395 -28.6748 c
123.6738 -28.4512 123.9277 -28.3398 124.2021 -28.3398 c
124.877 -28.3398 L
125.1367 -28.3359 125.3867 -28.4434 125.6309 -28.6631 c
125.873 -28.8818 125.9951 -29.123 125.9951 -29.3857 c
f
1 D
123.6709 -29.4092 m
123.6709 -30.5752 L
123.6709 -30.6816 123.709 -30.7656 123.7852 -30.8262 c
124 -31.0107 L
124.0479 -31.0527 124.1162 -31.0732 124.2021 -31.0732 c
124.8721 -31.0732 L
124.9697 -31.0732 125.0586 -31.0381 125.1377 -30.9668 c
125.3135 -30.8115 L
125.3838 -30.7578 125.4199 -30.6816 125.4199 -30.583 c
125.4199 -29.417 L
125.4199 -29.3027 125.3838 -29.2178 125.3135 -29.1641 c
125.1113 -29.002 L
125.043 -28.9453 124.9619 -28.918 124.8721 -28.918 c
124.2744 -28.918 L
124.1445 -28.918 124.0439 -28.9473 123.9736 -29.0088 c
123.7773 -29.1768 l
123.707 -29.2373 123.6709 -29.3145 123.6709 -29.4092 c
f
*U
U
0 D
0 R
0.75021 0.679683 0.670222 0.90164 0 0 0 XA
0.1 w135.3867 76.7183 m
135.3877 -39.209 L
14.5273 -39.209 L
14.5273 78.3438 L
14.5273 78.3506 L
30.2803 78.3506 L
30.2803 106.4443 l
43.373 106.4443 l
57.2168 120.2881 l
105.5771 120.3325 L
106.2676 120.123 L
106.8115 120.0078 107.3438 119.8442 107.8604 119.6333 c
108.3828 119.416 108.874 119.1602 109.3359 118.8652 C
110.1055 118.459 L
110.9961 117.5293 L
125.4404 103.1147 L
126.3291 102.2207 127.0059 101.2056 127.4756 100.0723 c
127.6836 99.5723 127.8477 99.0552 127.9648 98.5244 C
128.1885 97.8237 L
128.1914 85.9717 L
132.6436 81.52 L
133.5547 80.5972 134.2334 79.5674 134.6982 78.4194 c
134.8076 78.1528 134.9033 77.8818 134.9863 77.6074 C
135.3867 76.7183 L
s
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
